
/*
Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/
module bindbc.newton.funcs;

import bindbc.newton.types;

extern(C) @nogc nothrow __gshared
{
    alias da_NewtonWorldGetVersion =  int function();
    da_NewtonWorldGetVersion NewtonWorldGetVersion;

    alias da_NewtonWorldFloatSize =  int function();
    da_NewtonWorldFloatSize NewtonWorldFloatSize;

    alias da_NewtonGetMemoryUsed =  int function();
    da_NewtonGetMemoryUsed NewtonGetMemoryUsed;

    alias da_NewtonSetMemorySystem =  void function( NewtonAllocMemory malloc,  NewtonFreeMemory free);
    da_NewtonSetMemorySystem NewtonSetMemorySystem;

    alias da_NewtonCreate =  NewtonWorld* function();
    da_NewtonCreate NewtonCreate;

    alias da_NewtonDestroy =  void function(const NewtonWorld* newtonWorld);
    da_NewtonDestroy NewtonDestroy;

    alias da_NewtonDestroyAllBodies =  void function(const NewtonWorld* newtonWorld);
    da_NewtonDestroyAllBodies NewtonDestroyAllBodies;

    alias da_NewtonGetPostUpdateCallback =  NewtonPostUpdateCallback function(const NewtonWorld* newtonWorld);
    da_NewtonGetPostUpdateCallback NewtonGetPostUpdateCallback;

    alias da_NewtonSetPostUpdateCallback =  void function(const NewtonWorld* newtonWorld,  NewtonPostUpdateCallback callback);
    da_NewtonSetPostUpdateCallback NewtonSetPostUpdateCallback;

    alias da_NewtonAlloc =  void* function( int sizeInBytes);
    da_NewtonAlloc NewtonAlloc;

    alias da_NewtonFree =  void function( void* ptr);
    da_NewtonFree NewtonFree;

    alias da_NewtonLoadPlugins =  void function(const NewtonWorld* newtonWorld, const char* plugInPath);
    da_NewtonLoadPlugins NewtonLoadPlugins;

    alias da_NewtonUnloadPlugins =  void function(const NewtonWorld* newtonWorld);
    da_NewtonUnloadPlugins NewtonUnloadPlugins;

    alias da_NewtonCurrentPlugin =  void* function(const NewtonWorld* newtonWorld);
    da_NewtonCurrentPlugin NewtonCurrentPlugin;

    alias da_NewtonGetFirstPlugin =  void* function(const NewtonWorld* newtonWorld);
    da_NewtonGetFirstPlugin NewtonGetFirstPlugin;

    alias da_NewtonGetPreferedPlugin =  void* function(const NewtonWorld* newtonWorld);
    da_NewtonGetPreferedPlugin NewtonGetPreferedPlugin;

    alias da_NewtonGetNextPlugin =  void* function(const NewtonWorld* newtonWorld, const void* plugin);
    da_NewtonGetNextPlugin NewtonGetNextPlugin;

    alias da_NewtonGetPluginString = const char* function(const NewtonWorld* newtonWorld, const void* plugin);
    da_NewtonGetPluginString NewtonGetPluginString;

    alias da_NewtonSelectPlugin =  void function(const NewtonWorld* newtonWorld, const void* plugin);
    da_NewtonSelectPlugin NewtonSelectPlugin;

    alias da_NewtonGetContactMergeTolerance =  dFloat function(const NewtonWorld* newtonWorld);
    da_NewtonGetContactMergeTolerance NewtonGetContactMergeTolerance;

    alias da_NewtonSetContactMergeTolerance =  void function(const NewtonWorld* newtonWorld,  dFloat tolerance);
    da_NewtonSetContactMergeTolerance NewtonSetContactMergeTolerance;

    alias da_NewtonInvalidateCache =  void function(const NewtonWorld* newtonWorld);
    da_NewtonInvalidateCache NewtonInvalidateCache;

    alias da_NewtonSetSolverIterations =  void function(const NewtonWorld* newtonWorld,  int model);
    da_NewtonSetSolverIterations NewtonSetSolverIterations;

    alias da_NewtonGetSolverIterations =  int function(const NewtonWorld* newtonWorld);
    da_NewtonGetSolverIterations NewtonGetSolverIterations;

    alias da_NewtonSetParallelSolverOnLargeIsland =  void function(const NewtonWorld* newtonWorld,  int mode);
    da_NewtonSetParallelSolverOnLargeIsland NewtonSetParallelSolverOnLargeIsland;

    alias da_NewtonGetParallelSolverOnLargeIsland =  int function(const NewtonWorld* newtonWorld);
    da_NewtonGetParallelSolverOnLargeIsland NewtonGetParallelSolverOnLargeIsland;

    alias da_NewtonGetBroadphaseAlgorithm =  int function(const NewtonWorld* newtonWorld);
    da_NewtonGetBroadphaseAlgorithm NewtonGetBroadphaseAlgorithm;

    alias da_NewtonSelectBroadphaseAlgorithm =  void function(const NewtonWorld* newtonWorld,  int algorithmType);
    da_NewtonSelectBroadphaseAlgorithm NewtonSelectBroadphaseAlgorithm;

    alias da_NewtonResetBroadphase =  void function(const NewtonWorld* newtonWorld);
    da_NewtonResetBroadphase NewtonResetBroadphase;

    alias da_NewtonUpdate =  void function(const NewtonWorld* newtonWorld,  dFloat timestep);
    da_NewtonUpdate NewtonUpdate;

    alias da_NewtonUpdateAsync =  void function(const NewtonWorld* newtonWorld,  dFloat timestep);
    da_NewtonUpdateAsync NewtonUpdateAsync;

    alias da_NewtonWaitForUpdateToFinish =  void function(const NewtonWorld* newtonWorld);
    da_NewtonWaitForUpdateToFinish NewtonWaitForUpdateToFinish;

    alias da_NewtonGetNumberOfSubsteps =  int function(const NewtonWorld* newtonWorld);
    da_NewtonGetNumberOfSubsteps NewtonGetNumberOfSubsteps;

    alias da_NewtonSetNumberOfSubsteps =  void function(const NewtonWorld* newtonWorld,  int subSteps);
    da_NewtonSetNumberOfSubsteps NewtonSetNumberOfSubsteps;

    alias da_NewtonGetLastUpdateTime =  dFloat function(const NewtonWorld* newtonWorld);
    da_NewtonGetLastUpdateTime NewtonGetLastUpdateTime;

    alias da_NewtonSerializeToFile =  void function(const NewtonWorld* newtonWorld, const char* filename,  NewtonOnBodySerializationCallback bodyCallback,  void* bodyUserData);
    da_NewtonSerializeToFile NewtonSerializeToFile;

    alias da_NewtonDeserializeFromFile =  void function(const NewtonWorld* newtonWorld, const char* filename,  NewtonOnBodyDeserializationCallback bodyCallback,  void* bodyUserData);
    da_NewtonDeserializeFromFile NewtonDeserializeFromFile;

    alias da_NewtonSerializeScene =  void function(const NewtonWorld* newtonWorld,  NewtonOnBodySerializationCallback bodyCallback,  void* bodyUserData,  NewtonSerializeCallback serializeCallback,  void* serializeHandle);
    da_NewtonSerializeScene NewtonSerializeScene;

    alias da_NewtonDeserializeScene =  void function(const NewtonWorld* newtonWorld,  NewtonOnBodyDeserializationCallback bodyCallback,  void* bodyUserData,  NewtonDeserializeCallback serializeCallback,  void* serializeHandle);
    da_NewtonDeserializeScene NewtonDeserializeScene;

    alias da_NewtonFindSerializedBody =  NewtonBody* function(const NewtonWorld* newtonWorld,  int bodySerializedID);
    da_NewtonFindSerializedBody NewtonFindSerializedBody;

    alias da_NewtonSetJointSerializationCallbacks =  void function(const NewtonWorld* newtonWorld,  NewtonOnJointSerializationCallback serializeJoint,  NewtonOnJointDeserializationCallback deserializeJoint);
    da_NewtonSetJointSerializationCallbacks NewtonSetJointSerializationCallbacks;

    alias da_NewtonGetJointSerializationCallbacks =  void function(const NewtonWorld* newtonWorld,  NewtonOnJointSerializationCallback* serializeJoint,  NewtonOnJointDeserializationCallback* deserializeJoint);
    da_NewtonGetJointSerializationCallbacks NewtonGetJointSerializationCallbacks;

    alias da_NewtonWorldCriticalSectionLock =  void function(const NewtonWorld* newtonWorld,  int threadIndex);
    da_NewtonWorldCriticalSectionLock NewtonWorldCriticalSectionLock;

    alias da_NewtonWorldCriticalSectionUnlock =  void function(const NewtonWorld* newtonWorld);
    da_NewtonWorldCriticalSectionUnlock NewtonWorldCriticalSectionUnlock;

    alias da_NewtonSetThreadsCount =  void function(const NewtonWorld* newtonWorld,  int threads);
    da_NewtonSetThreadsCount NewtonSetThreadsCount;

    alias da_NewtonGetThreadsCount =  int function(const NewtonWorld* newtonWorld);
    da_NewtonGetThreadsCount NewtonGetThreadsCount;

    alias da_NewtonGetMaxThreadsCount =  int function(const NewtonWorld* newtonWorld);
    da_NewtonGetMaxThreadsCount NewtonGetMaxThreadsCount;

    alias da_NewtonDispachThreadJob =  void function(const NewtonWorld* newtonWorld,  NewtonJobTask task,  void* usedData, const char* functionName);
    da_NewtonDispachThreadJob NewtonDispachThreadJob;

    alias da_NewtonSyncThreadJobs =  void function(const NewtonWorld* newtonWorld);
    da_NewtonSyncThreadJobs NewtonSyncThreadJobs;

    alias da_NewtonAtomicAdd =  int function( int* ptr,  int value);
    da_NewtonAtomicAdd NewtonAtomicAdd;

    alias da_NewtonAtomicSwap =  int function( int* ptr,  int value);
    da_NewtonAtomicSwap NewtonAtomicSwap;

    alias da_NewtonYield =  void function();
    da_NewtonYield NewtonYield;

    alias da_NewtonSetIslandUpdateEvent =  void function(const NewtonWorld* newtonWorld,  NewtonIslandUpdate islandUpdate);
    da_NewtonSetIslandUpdateEvent NewtonSetIslandUpdateEvent;

    alias da_NewtonWorldForEachJointDo =  void function(const NewtonWorld* newtonWorld,  NewtonJointIterator callback,  void* userData);
    da_NewtonWorldForEachJointDo NewtonWorldForEachJointDo;

    alias da_NewtonWorldForEachBodyInAABBDo =  void function(const NewtonWorld* newtonWorld, const dFloat* p0, const dFloat* p1,  NewtonBodyIterator callback,  void* userData);
    da_NewtonWorldForEachBodyInAABBDo NewtonWorldForEachBodyInAABBDo;

    alias da_NewtonWorldSetUserData =  void function(const NewtonWorld* newtonWorld,  void* userData);
    da_NewtonWorldSetUserData NewtonWorldSetUserData;

    alias da_NewtonWorldGetUserData =  void* function(const NewtonWorld* newtonWorld);
    da_NewtonWorldGetUserData NewtonWorldGetUserData;

    alias da_NewtonWorldAddListener =  void* function(const NewtonWorld* newtonWorld, const char* nameId,  void* listenerUserData);
    da_NewtonWorldAddListener NewtonWorldAddListener;

    alias da_NewtonWorldGetListener =  void* function(const NewtonWorld* newtonWorld, const char* nameId);
    da_NewtonWorldGetListener NewtonWorldGetListener;

    alias da_NewtonWorldListenerSetDebugCallback =  void function(const NewtonWorld* newtonWorld,  void* listener,  NewtonWorldListenerDebugCallback callback);
    da_NewtonWorldListenerSetDebugCallback NewtonWorldListenerSetDebugCallback;

    alias da_NewtonWorldListenerSetPostStepCallback =  void function(const NewtonWorld* newtonWorld,  void* listener,  NewtonWorldUpdateListenerCallback callback);
    da_NewtonWorldListenerSetPostStepCallback NewtonWorldListenerSetPostStepCallback;

    alias da_NewtonWorldListenerSetPreUpdateCallback =  void function(const NewtonWorld* newtonWorld,  void* listener,  NewtonWorldUpdateListenerCallback callback);
    da_NewtonWorldListenerSetPreUpdateCallback NewtonWorldListenerSetPreUpdateCallback;

    alias da_NewtonWorldListenerSetPostUpdateCallback =  void function(const NewtonWorld* newtonWorld,  void* listener,  NewtonWorldUpdateListenerCallback callback);
    da_NewtonWorldListenerSetPostUpdateCallback NewtonWorldListenerSetPostUpdateCallback;

    alias da_NewtonWorldListenerSetDestructorCallback =  void function(const NewtonWorld* newtonWorld,  void* listener,  NewtonWorldDestroyListenerCallback callback);
    da_NewtonWorldListenerSetDestructorCallback NewtonWorldListenerSetDestructorCallback;

    alias da_NewtonWorldListenerSetBodyDestroyCallback =  void function(const NewtonWorld* newtonWorld,  void* listener,  NewtonWorldListenerBodyDestroyCallback callback);
    da_NewtonWorldListenerSetBodyDestroyCallback NewtonWorldListenerSetBodyDestroyCallback;

    alias da_NewtonWorldListenerDebug =  void function(const NewtonWorld* newtonWorld,  void* context);
    da_NewtonWorldListenerDebug NewtonWorldListenerDebug;

    alias da_NewtonWorldGetListenerUserData =  void* function(const NewtonWorld* newtonWorld,  void* listener);
    da_NewtonWorldGetListenerUserData NewtonWorldGetListenerUserData;

    alias da_NewtonWorldListenerGetBodyDestroyCallback =  NewtonWorldListenerBodyDestroyCallback function(const NewtonWorld* newtonWorld,  void* listener);
    da_NewtonWorldListenerGetBodyDestroyCallback NewtonWorldListenerGetBodyDestroyCallback;

    alias da_NewtonWorldSetDestructorCallback =  void function(const NewtonWorld* newtonWorld,  NewtonWorldDestructorCallback destructor);
    da_NewtonWorldSetDestructorCallback NewtonWorldSetDestructorCallback;

    alias da_NewtonWorldGetDestructorCallback =  NewtonWorldDestructorCallback function(const NewtonWorld* newtonWorld);
    da_NewtonWorldGetDestructorCallback NewtonWorldGetDestructorCallback;

    alias da_NewtonWorldSetCollisionConstructorDestructorCallback =  void function(const NewtonWorld* newtonWorld,  NewtonCollisionCopyConstructionCallback constructor,  NewtonCollisionDestructorCallback destructor);
    da_NewtonWorldSetCollisionConstructorDestructorCallback NewtonWorldSetCollisionConstructorDestructorCallback;

    alias da_NewtonWorldSetCreateDestroyContactCallback =  void function(const NewtonWorld* newtonWorld,  NewtonCreateContactCallback createContact,  NewtonDestroyContactCallback destroyContact);
    da_NewtonWorldSetCreateDestroyContactCallback NewtonWorldSetCreateDestroyContactCallback;

    alias da_NewtonWorldRayCast =  void function(const NewtonWorld* newtonWorld, const dFloat* p0, const dFloat* p1,  NewtonWorldRayFilterCallback filter,  void* userData,  NewtonWorldRayPrefilterCallback prefilter,  int threadIndex);
    da_NewtonWorldRayCast NewtonWorldRayCast;

    alias da_NewtonWorldConvexCast =  int function(const NewtonWorld* newtonWorld, const dFloat* matrix, const dFloat* target, const NewtonCollision* shape,  dFloat* param,  void* userData,  NewtonWorldRayPrefilterCallback prefilter,  NewtonWorldConvexCastReturnInfo* info,  int maxContactsCount,  int threadIndex);
    da_NewtonWorldConvexCast NewtonWorldConvexCast;

    alias da_NewtonWorldCollide =  int function(const NewtonWorld* newtonWorld, const dFloat* matrix, const NewtonCollision* shape,  void* userData,  NewtonWorldRayPrefilterCallback prefilter,  NewtonWorldConvexCastReturnInfo* info,  int maxContactsCount,  int threadIndex);
    da_NewtonWorldCollide NewtonWorldCollide;

    alias da_NewtonWorldGetBodyCount =  int function(const NewtonWorld* newtonWorld);
    da_NewtonWorldGetBodyCount NewtonWorldGetBodyCount;

    alias da_NewtonWorldGetConstraintCount =  int function(const NewtonWorld* newtonWorld);
    da_NewtonWorldGetConstraintCount NewtonWorldGetConstraintCount;

    alias da_NewtonWorldFindJoint =  NewtonJoint* function(const NewtonBody* body0, const NewtonBody* body1);
    da_NewtonWorldFindJoint NewtonWorldFindJoint;

    alias da_NewtonIslandGetBody =  NewtonBody* function(const void* island,  int bodyIndex);
    da_NewtonIslandGetBody NewtonIslandGetBody;

    alias da_NewtonIslandGetBodyAABB =  void function(const void* island,  int bodyIndex,  dFloat* p0,  dFloat* p1);
    da_NewtonIslandGetBodyAABB NewtonIslandGetBodyAABB;

    alias da_NewtonMaterialCreateGroupID =  int function(const NewtonWorld* newtonWorld);
    da_NewtonMaterialCreateGroupID NewtonMaterialCreateGroupID;

    alias da_NewtonMaterialGetDefaultGroupID =  int function(const NewtonWorld* newtonWorld);
    da_NewtonMaterialGetDefaultGroupID NewtonMaterialGetDefaultGroupID;

    alias da_NewtonMaterialDestroyAllGroupID =  void function(const NewtonWorld* newtonWorld);
    da_NewtonMaterialDestroyAllGroupID NewtonMaterialDestroyAllGroupID;

    alias da_NewtonMaterialGetUserData =  void* function(const NewtonWorld* newtonWorld,  int id0,  int id1);
    da_NewtonMaterialGetUserData NewtonMaterialGetUserData;

    alias da_NewtonMaterialSetSurfaceThickness =  void function(const NewtonWorld* newtonWorld,  int id0,  int id1,  dFloat thickness);
    da_NewtonMaterialSetSurfaceThickness NewtonMaterialSetSurfaceThickness;

    alias da_NewtonMaterialSetCallbackUserData =  void function(const NewtonWorld* newtonWorld,  int id0,  int id1,  void* userData);
    da_NewtonMaterialSetCallbackUserData NewtonMaterialSetCallbackUserData;

    alias da_NewtonMaterialSetContactGenerationCallback =  void function(const NewtonWorld* newtonWorld,  int id0,  int id1,  NewtonOnContactGeneration contactGeneration);
    da_NewtonMaterialSetContactGenerationCallback NewtonMaterialSetContactGenerationCallback;

    alias da_NewtonMaterialSetCompoundCollisionCallback =  void function(const NewtonWorld* newtonWorld,  int id0,  int id1,  NewtonOnCompoundSubCollisionAABBOverlap compoundAabbOverlap);
    da_NewtonMaterialSetCompoundCollisionCallback NewtonMaterialSetCompoundCollisionCallback;

    alias da_NewtonMaterialSetCollisionCallback =  void function(const NewtonWorld* newtonWorld,  int id0,  int id1,  NewtonOnAABBOverlap aabbOverlap,  NewtonContactsProcess process);
    da_NewtonMaterialSetCollisionCallback NewtonMaterialSetCollisionCallback;

    alias da_NewtonMaterialSetDefaultSoftness =  void function(const NewtonWorld* newtonWorld,  int id0,  int id1,  dFloat value);
    da_NewtonMaterialSetDefaultSoftness NewtonMaterialSetDefaultSoftness;

    alias da_NewtonMaterialSetDefaultElasticity =  void function(const NewtonWorld* newtonWorld,  int id0,  int id1,  dFloat elasticCoef);
    da_NewtonMaterialSetDefaultElasticity NewtonMaterialSetDefaultElasticity;

    alias da_NewtonMaterialSetDefaultCollidable =  void function(const NewtonWorld* newtonWorld,  int id0,  int id1,  int state);
    da_NewtonMaterialSetDefaultCollidable NewtonMaterialSetDefaultCollidable;

    alias da_NewtonMaterialSetDefaultFriction =  void function(const NewtonWorld* newtonWorld,  int id0,  int id1,  dFloat staticFriction,  dFloat kineticFriction);
    da_NewtonMaterialSetDefaultFriction NewtonMaterialSetDefaultFriction;

    alias da_NewtonMaterialJointResetIntraJointCollision =  void function(const NewtonWorld* newtonWorld,  int id0,  int id1);
    da_NewtonMaterialJointResetIntraJointCollision NewtonMaterialJointResetIntraJointCollision;

    alias da_NewtonMaterialJointResetSelftJointCollision =  void function(const NewtonWorld* newtonWorld,  int id0,  int id1);
    da_NewtonMaterialJointResetSelftJointCollision NewtonMaterialJointResetSelftJointCollision;

    alias da_NewtonWorldGetFirstMaterial =  NewtonMaterial* function(const NewtonWorld* newtonWorld);
    da_NewtonWorldGetFirstMaterial NewtonWorldGetFirstMaterial;

    alias da_NewtonWorldGetNextMaterial =  NewtonMaterial* function(const NewtonWorld* newtonWorld, const NewtonMaterial* material);
    da_NewtonWorldGetNextMaterial NewtonWorldGetNextMaterial;

    alias da_NewtonWorldGetFirstBody =  NewtonBody* function(const NewtonWorld* newtonWorld);
    da_NewtonWorldGetFirstBody NewtonWorldGetFirstBody;

    alias da_NewtonWorldGetNextBody =  NewtonBody* function(const NewtonWorld* newtonWorld, const NewtonBody* curBody);
    da_NewtonWorldGetNextBody NewtonWorldGetNextBody;

    alias da_NewtonMaterialGetMaterialPairUserData =  void* function(const NewtonMaterial* material);
    da_NewtonMaterialGetMaterialPairUserData NewtonMaterialGetMaterialPairUserData;

    alias da_NewtonMaterialGetContactFaceAttribute =  uint function(const NewtonMaterial* material);
    da_NewtonMaterialGetContactFaceAttribute NewtonMaterialGetContactFaceAttribute;

    alias da_NewtonMaterialGetBodyCollidingShape =  NewtonCollision* function(const NewtonMaterial* material, const NewtonBody* _body);
    da_NewtonMaterialGetBodyCollidingShape NewtonMaterialGetBodyCollidingShape;

    alias da_NewtonMaterialGetContactNormalSpeed =  dFloat function(const NewtonMaterial* material);
    da_NewtonMaterialGetContactNormalSpeed NewtonMaterialGetContactNormalSpeed;

    alias da_NewtonMaterialGetContactForce =  void function(const NewtonMaterial* material, const NewtonBody* _body,  dFloat* force);
    da_NewtonMaterialGetContactForce NewtonMaterialGetContactForce;

    alias da_NewtonMaterialGetContactPositionAndNormal =  void function(const NewtonMaterial* material, const NewtonBody* _body,  dFloat* posit,  dFloat* normal);
    da_NewtonMaterialGetContactPositionAndNormal NewtonMaterialGetContactPositionAndNormal;

    alias da_NewtonMaterialGetContactTangentDirections =  void function(const NewtonMaterial* material, const NewtonBody* _body,  dFloat* dir0,  dFloat* dir1);
    da_NewtonMaterialGetContactTangentDirections NewtonMaterialGetContactTangentDirections;

    alias da_NewtonMaterialGetContactTangentSpeed =  dFloat function(const NewtonMaterial* material,  int index);
    da_NewtonMaterialGetContactTangentSpeed NewtonMaterialGetContactTangentSpeed;

    alias da_NewtonMaterialGetContactMaxNormalImpact =  dFloat function(const NewtonMaterial* material);
    da_NewtonMaterialGetContactMaxNormalImpact NewtonMaterialGetContactMaxNormalImpact;

    alias da_NewtonMaterialGetContactMaxTangentImpact =  dFloat function(const NewtonMaterial* material,  int index);
    da_NewtonMaterialGetContactMaxTangentImpact NewtonMaterialGetContactMaxTangentImpact;

    alias da_NewtonMaterialGetContactPenetration =  dFloat function(const NewtonMaterial* material);
    da_NewtonMaterialGetContactPenetration NewtonMaterialGetContactPenetration;

    alias da_NewtonMaterialSetAsSoftContact =  void function(const NewtonMaterial* material,  dFloat relaxation);
    da_NewtonMaterialSetAsSoftContact NewtonMaterialSetAsSoftContact;

    alias da_NewtonMaterialSetContactSoftness =  void function(const NewtonMaterial* material,  dFloat softness);
    da_NewtonMaterialSetContactSoftness NewtonMaterialSetContactSoftness;

    alias da_NewtonMaterialSetContactThickness =  void function(const NewtonMaterial* material,  dFloat thickness);
    da_NewtonMaterialSetContactThickness NewtonMaterialSetContactThickness;

    alias da_NewtonMaterialSetContactElasticity =  void function(const NewtonMaterial* material,  dFloat restitution);
    da_NewtonMaterialSetContactElasticity NewtonMaterialSetContactElasticity;

    alias da_NewtonMaterialSetContactFrictionState =  void function(const NewtonMaterial* material,  int state,  int index);
    da_NewtonMaterialSetContactFrictionState NewtonMaterialSetContactFrictionState;

    alias da_NewtonMaterialSetContactFrictionCoef =  void function(const NewtonMaterial* material,  dFloat staticFrictionCoef,  dFloat kineticFrictionCoef,  int index);
    da_NewtonMaterialSetContactFrictionCoef NewtonMaterialSetContactFrictionCoef;

    alias da_NewtonMaterialSetContactNormalAcceleration =  void function(const NewtonMaterial* material,  dFloat accel);
    da_NewtonMaterialSetContactNormalAcceleration NewtonMaterialSetContactNormalAcceleration;

    alias da_NewtonMaterialSetContactNormalDirection =  void function(const NewtonMaterial* material, const dFloat* directionVector);
    da_NewtonMaterialSetContactNormalDirection NewtonMaterialSetContactNormalDirection;

    alias da_NewtonMaterialSetContactPosition =  void function(const NewtonMaterial* material, const dFloat* position);
    da_NewtonMaterialSetContactPosition NewtonMaterialSetContactPosition;

    alias da_NewtonMaterialSetContactTangentFriction =  void function(const NewtonMaterial* material,  dFloat friction,  int index);
    da_NewtonMaterialSetContactTangentFriction NewtonMaterialSetContactTangentFriction;

    alias da_NewtonMaterialSetContactTangentAcceleration =  void function(const NewtonMaterial* material,  dFloat accel,  int index);
    da_NewtonMaterialSetContactTangentAcceleration NewtonMaterialSetContactTangentAcceleration;

    alias da_NewtonMaterialContactRotateTangentDirections =  void function(const NewtonMaterial* material, const dFloat* directionVector);
    da_NewtonMaterialContactRotateTangentDirections NewtonMaterialContactRotateTangentDirections;

    alias da_NewtonMaterialGetContactPruningTolerance =  dFloat function(const NewtonJoint* contactJoint);
    da_NewtonMaterialGetContactPruningTolerance NewtonMaterialGetContactPruningTolerance;

    alias da_NewtonMaterialSetContactPruningTolerance =  void function(const NewtonJoint* contactJoint,  dFloat tolerance);
    da_NewtonMaterialSetContactPruningTolerance NewtonMaterialSetContactPruningTolerance;

    alias da_NewtonCreateNull =  NewtonCollision* function(const NewtonWorld* newtonWorld);
    da_NewtonCreateNull NewtonCreateNull;

    alias da_NewtonCreateSphere =  NewtonCollision* function(const NewtonWorld* newtonWorld,  dFloat radius,  int shapeID, const dFloat* offsetMatrix);
    da_NewtonCreateSphere NewtonCreateSphere;

    alias da_NewtonCreateBox =  NewtonCollision* function(const NewtonWorld* newtonWorld,  dFloat dx,  dFloat dy,  dFloat dz,  int shapeID, const dFloat* offsetMatrix);
    da_NewtonCreateBox NewtonCreateBox;

    alias da_NewtonCreateCone =  NewtonCollision* function(const NewtonWorld* newtonWorld,  dFloat radius,  dFloat height,  int shapeID, const dFloat* offsetMatrix);
    da_NewtonCreateCone NewtonCreateCone;

    alias da_NewtonCreateCapsule =  NewtonCollision* function(const NewtonWorld* newtonWorld,  dFloat radius0,  dFloat radius1,  dFloat height,  int shapeID, const dFloat* offsetMatrix);
    da_NewtonCreateCapsule NewtonCreateCapsule;

    alias da_NewtonCreateCylinder =  NewtonCollision* function(const NewtonWorld* newtonWorld,  dFloat radio0,  dFloat radio1,  dFloat height,  int shapeID, const dFloat* offsetMatrix);
    da_NewtonCreateCylinder NewtonCreateCylinder;

    alias da_NewtonCreateChamferCylinder =  NewtonCollision* function(const NewtonWorld* newtonWorld,  dFloat radius,  dFloat height,  int shapeID, const dFloat* offsetMatrix);
    da_NewtonCreateChamferCylinder NewtonCreateChamferCylinder;

    alias da_NewtonCreateConvexHull =  NewtonCollision* function(const NewtonWorld* newtonWorld,  int count, const dFloat* vertexCloud,  int strideInBytes,  dFloat tolerance,  int shapeID, const dFloat* offsetMatrix);
    da_NewtonCreateConvexHull NewtonCreateConvexHull;

    alias da_NewtonCreateConvexHullFromMesh =  NewtonCollision* function(const NewtonWorld* newtonWorld, const NewtonMesh* mesh,  dFloat tolerance,  int shapeID);
    da_NewtonCreateConvexHullFromMesh NewtonCreateConvexHullFromMesh;

    alias da_NewtonCollisionGetMode =  int function(const NewtonCollision* convexCollision);
    da_NewtonCollisionGetMode NewtonCollisionGetMode;

    alias da_NewtonCollisionSetMode =  void function(const NewtonCollision* convexCollision,  int mode);
    da_NewtonCollisionSetMode NewtonCollisionSetMode;

    alias da_NewtonConvexHullGetFaceIndices =  int function(const NewtonCollision* convexHullCollision,  int face,  int* faceIndices);
    da_NewtonConvexHullGetFaceIndices NewtonConvexHullGetFaceIndices;

    alias da_NewtonConvexHullGetVertexData =  int function(const NewtonCollision* convexHullCollision,  dFloat* * vertexData,  int* strideInBytes);
    da_NewtonConvexHullGetVertexData NewtonConvexHullGetVertexData;

    alias da_NewtonConvexCollisionCalculateVolume =  dFloat function(const NewtonCollision* convexCollision);
    da_NewtonConvexCollisionCalculateVolume NewtonConvexCollisionCalculateVolume;

    alias da_NewtonConvexCollisionCalculateInertialMatrix =  void function(const NewtonCollision* convexCollision,  dFloat* inertia,  dFloat* origin);
    da_NewtonConvexCollisionCalculateInertialMatrix NewtonConvexCollisionCalculateInertialMatrix;

    alias da_NewtonConvexCollisionCalculateBuoyancyVolume =  dFloat function(const NewtonCollision* convexCollision, const dFloat* matrix, const dFloat* fluidPlane,  dFloat* centerOfBuoyancy);
    da_NewtonConvexCollisionCalculateBuoyancyVolume NewtonConvexCollisionCalculateBuoyancyVolume;

    alias da_NewtonCollisionDataPointer = const void* function(const NewtonCollision* convexCollision);
    da_NewtonCollisionDataPointer NewtonCollisionDataPointer;

    alias da_NewtonCreateCompoundCollision =  NewtonCollision* function(const NewtonWorld* newtonWorld,  int shapeID);
    da_NewtonCreateCompoundCollision NewtonCreateCompoundCollision;

    alias da_NewtonCreateCompoundCollisionFromMesh =  NewtonCollision* function(const NewtonWorld* newtonWorld, const NewtonMesh* mesh,  dFloat hullTolerance,  int shapeID,  int subShapeID);
    da_NewtonCreateCompoundCollisionFromMesh NewtonCreateCompoundCollisionFromMesh;

    alias da_NewtonCompoundCollisionBeginAddRemove =  void function( NewtonCollision* compoundCollision);
    da_NewtonCompoundCollisionBeginAddRemove NewtonCompoundCollisionBeginAddRemove;

    alias da_NewtonCompoundCollisionAddSubCollision =  void* function( NewtonCollision* compoundCollision, const NewtonCollision* convexCollision);
    da_NewtonCompoundCollisionAddSubCollision NewtonCompoundCollisionAddSubCollision;

    alias da_NewtonCompoundCollisionRemoveSubCollision =  void function( NewtonCollision* compoundCollision, const void* collisionNode);
    da_NewtonCompoundCollisionRemoveSubCollision NewtonCompoundCollisionRemoveSubCollision;

    alias da_NewtonCompoundCollisionRemoveSubCollisionByIndex =  void function( NewtonCollision* compoundCollision,  int nodeIndex);
    da_NewtonCompoundCollisionRemoveSubCollisionByIndex NewtonCompoundCollisionRemoveSubCollisionByIndex;

    alias da_NewtonCompoundCollisionSetSubCollisionMatrix =  void function( NewtonCollision* compoundCollision, const void* collisionNode, const dFloat* matrix);
    da_NewtonCompoundCollisionSetSubCollisionMatrix NewtonCompoundCollisionSetSubCollisionMatrix;

    alias da_NewtonCompoundCollisionEndAddRemove =  void function( NewtonCollision* compoundCollision);
    da_NewtonCompoundCollisionEndAddRemove NewtonCompoundCollisionEndAddRemove;

    alias da_NewtonCompoundCollisionGetFirstNode =  void* function( NewtonCollision* compoundCollision);
    da_NewtonCompoundCollisionGetFirstNode NewtonCompoundCollisionGetFirstNode;

    alias da_NewtonCompoundCollisionGetNextNode =  void* function( NewtonCollision* compoundCollision, const void* collisionNode);
    da_NewtonCompoundCollisionGetNextNode NewtonCompoundCollisionGetNextNode;

    alias da_NewtonCompoundCollisionGetNodeByIndex =  void* function( NewtonCollision* compoundCollision,  int index);
    da_NewtonCompoundCollisionGetNodeByIndex NewtonCompoundCollisionGetNodeByIndex;

    alias da_NewtonCompoundCollisionGetNodeIndex =  int function( NewtonCollision* compoundCollision, const void* collisionNode);
    da_NewtonCompoundCollisionGetNodeIndex NewtonCompoundCollisionGetNodeIndex;

    alias da_NewtonCompoundCollisionGetCollisionFromNode =  NewtonCollision* function( NewtonCollision* compoundCollision, const void* collisionNode);
    da_NewtonCompoundCollisionGetCollisionFromNode NewtonCompoundCollisionGetCollisionFromNode;

    alias da_NewtonCreateFracturedCompoundCollision =  NewtonCollision* function(const NewtonWorld* newtonWorld, const NewtonMesh* solidMesh,  int shapeID,  int fracturePhysicsMaterialID,  int pointcloudCount, const dFloat* vertexCloud,  int strideInBytes,  int materialID, const dFloat* textureMatrix,  NewtonFractureCompoundCollisionReconstructMainMeshCallBack regenerateMainMeshCallback,  NewtonFractureCompoundCollisionOnEmitCompoundFractured emitFracturedCompound,  NewtonFractureCompoundCollisionOnEmitChunk emitFracfuredChunk);
    da_NewtonCreateFracturedCompoundCollision NewtonCreateFracturedCompoundCollision;

    alias da_NewtonFracturedCompoundPlaneClip =  NewtonCollision* function(const NewtonCollision* fracturedCompound, const dFloat* plane);
    da_NewtonFracturedCompoundPlaneClip NewtonFracturedCompoundPlaneClip;

    alias da_NewtonFracturedCompoundSetCallbacks =  void function(const NewtonCollision* fracturedCompound,  NewtonFractureCompoundCollisionReconstructMainMeshCallBack regenerateMainMeshCallback,  NewtonFractureCompoundCollisionOnEmitCompoundFractured emitFracturedCompound,  NewtonFractureCompoundCollisionOnEmitChunk emitFracfuredChunk);
    da_NewtonFracturedCompoundSetCallbacks NewtonFracturedCompoundSetCallbacks;

    alias da_NewtonFracturedCompoundIsNodeFreeToDetach =  int function(const NewtonCollision* fracturedCompound,  void* collisionNode);
    da_NewtonFracturedCompoundIsNodeFreeToDetach NewtonFracturedCompoundIsNodeFreeToDetach;

    alias da_NewtonFracturedCompoundNeighborNodeList =  int function(const NewtonCollision* fracturedCompound,  void* collisionNode,  void* * list,  int maxCount);
    da_NewtonFracturedCompoundNeighborNodeList NewtonFracturedCompoundNeighborNodeList;

    alias da_NewtonFracturedCompoundGetMainMesh =  NewtonFracturedCompoundMeshPart* function(const NewtonCollision* fracturedCompound);
    da_NewtonFracturedCompoundGetMainMesh NewtonFracturedCompoundGetMainMesh;

    alias da_NewtonFracturedCompoundGetFirstSubMesh =  NewtonFracturedCompoundMeshPart* function(const NewtonCollision* fracturedCompound);
    da_NewtonFracturedCompoundGetFirstSubMesh NewtonFracturedCompoundGetFirstSubMesh;

    alias da_NewtonFracturedCompoundGetNextSubMesh =  NewtonFracturedCompoundMeshPart* function(const NewtonCollision* fracturedCompound,  NewtonFracturedCompoundMeshPart* subMesh);
    da_NewtonFracturedCompoundGetNextSubMesh NewtonFracturedCompoundGetNextSubMesh;

    alias da_NewtonFracturedCompoundCollisionGetVertexCount =  int function(const NewtonCollision* fracturedCompound, const NewtonFracturedCompoundMeshPart* meshOwner);
    da_NewtonFracturedCompoundCollisionGetVertexCount NewtonFracturedCompoundCollisionGetVertexCount;

    alias da_NewtonFracturedCompoundCollisionGetVertexPositions = const dFloat* function(const NewtonCollision* fracturedCompound, const NewtonFracturedCompoundMeshPart* meshOwner);
    da_NewtonFracturedCompoundCollisionGetVertexPositions NewtonFracturedCompoundCollisionGetVertexPositions;

    alias da_NewtonFracturedCompoundCollisionGetVertexNormals = const dFloat* function(const NewtonCollision* fracturedCompound, const NewtonFracturedCompoundMeshPart* meshOwner);
    da_NewtonFracturedCompoundCollisionGetVertexNormals NewtonFracturedCompoundCollisionGetVertexNormals;

    alias da_NewtonFracturedCompoundCollisionGetVertexUVs = const dFloat* function(const NewtonCollision* fracturedCompound, const NewtonFracturedCompoundMeshPart* meshOwner);
    da_NewtonFracturedCompoundCollisionGetVertexUVs NewtonFracturedCompoundCollisionGetVertexUVs;

    alias da_NewtonFracturedCompoundMeshPartGetIndexStream =  int function(const NewtonCollision* fracturedCompound, const NewtonFracturedCompoundMeshPart* meshOwner, const void* segment,  int* index);
    da_NewtonFracturedCompoundMeshPartGetIndexStream NewtonFracturedCompoundMeshPartGetIndexStream;

    alias da_NewtonFracturedCompoundMeshPartGetFirstSegment =  void* function(const NewtonFracturedCompoundMeshPart* fractureCompoundMeshPart);
    da_NewtonFracturedCompoundMeshPartGetFirstSegment NewtonFracturedCompoundMeshPartGetFirstSegment;

    alias da_NewtonFracturedCompoundMeshPartGetNextSegment =  void* function(const void* fractureCompoundMeshSegment);
    da_NewtonFracturedCompoundMeshPartGetNextSegment NewtonFracturedCompoundMeshPartGetNextSegment;

    alias da_NewtonFracturedCompoundMeshPartGetMaterial =  int function(const void* fractureCompoundMeshSegment);
    da_NewtonFracturedCompoundMeshPartGetMaterial NewtonFracturedCompoundMeshPartGetMaterial;

    alias da_NewtonFracturedCompoundMeshPartGetIndexCount =  int function(const void* fractureCompoundMeshSegment);
    da_NewtonFracturedCompoundMeshPartGetIndexCount NewtonFracturedCompoundMeshPartGetIndexCount;

    alias da_NewtonCreateSceneCollision =  NewtonCollision* function(const NewtonWorld* newtonWorld,  int shapeID);
    da_NewtonCreateSceneCollision NewtonCreateSceneCollision;

    alias da_NewtonSceneCollisionBeginAddRemove =  void function( NewtonCollision* sceneCollision);
    da_NewtonSceneCollisionBeginAddRemove NewtonSceneCollisionBeginAddRemove;

    alias da_NewtonSceneCollisionAddSubCollision =  void* function( NewtonCollision* sceneCollision, const NewtonCollision* collision);
    da_NewtonSceneCollisionAddSubCollision NewtonSceneCollisionAddSubCollision;

    alias da_NewtonSceneCollisionRemoveSubCollision =  void function( NewtonCollision* compoundCollision, const void* collisionNode);
    da_NewtonSceneCollisionRemoveSubCollision NewtonSceneCollisionRemoveSubCollision;

    alias da_NewtonSceneCollisionRemoveSubCollisionByIndex =  void function( NewtonCollision* sceneCollision,  int nodeIndex);
    da_NewtonSceneCollisionRemoveSubCollisionByIndex NewtonSceneCollisionRemoveSubCollisionByIndex;

    alias da_NewtonSceneCollisionSetSubCollisionMatrix =  void function( NewtonCollision* sceneCollision, const void* collisionNode, const dFloat* matrix);
    da_NewtonSceneCollisionSetSubCollisionMatrix NewtonSceneCollisionSetSubCollisionMatrix;

    alias da_NewtonSceneCollisionEndAddRemove =  void function( NewtonCollision* sceneCollision);
    da_NewtonSceneCollisionEndAddRemove NewtonSceneCollisionEndAddRemove;

    alias da_NewtonSceneCollisionGetFirstNode =  void* function( NewtonCollision* sceneCollision);
    da_NewtonSceneCollisionGetFirstNode NewtonSceneCollisionGetFirstNode;

    alias da_NewtonSceneCollisionGetNextNode =  void* function( NewtonCollision* sceneCollision, const void* collisionNode);
    da_NewtonSceneCollisionGetNextNode NewtonSceneCollisionGetNextNode;

    alias da_NewtonSceneCollisionGetNodeByIndex =  void* function( NewtonCollision* sceneCollision,  int index);
    da_NewtonSceneCollisionGetNodeByIndex NewtonSceneCollisionGetNodeByIndex;

    alias da_NewtonSceneCollisionGetNodeIndex =  int function( NewtonCollision* sceneCollision, const void* collisionNode);
    da_NewtonSceneCollisionGetNodeIndex NewtonSceneCollisionGetNodeIndex;

    alias da_NewtonSceneCollisionGetCollisionFromNode =  NewtonCollision* function( NewtonCollision* sceneCollision, const void* collisionNode);
    da_NewtonSceneCollisionGetCollisionFromNode NewtonSceneCollisionGetCollisionFromNode;

    alias da_NewtonCreateUserMeshCollision =  NewtonCollision* function(const NewtonWorld* newtonWorld, const dFloat* minBox, const dFloat* maxBox,  void* userData,  NewtonUserMeshCollisionCollideCallback collideCallback,  NewtonUserMeshCollisionRayHitCallback rayHitCallback,  NewtonUserMeshCollisionDestroyCallback destroyCallback,  NewtonUserMeshCollisionGetCollisionInfo getInfoCallback,  NewtonUserMeshCollisionAABBTest getLocalAABBCallback,  NewtonUserMeshCollisionGetFacesInAABB facesInAABBCallback,  NewtonOnUserCollisionSerializationCallback serializeCallback,  int shapeID);
    da_NewtonCreateUserMeshCollision NewtonCreateUserMeshCollision;

    alias da_NewtonUserMeshCollisionContinuousOverlapTest =  int function(const NewtonUserMeshCollisionCollideDesc* collideDescData, const void* continueCollisionHandle, const dFloat* minAabb, const dFloat* maxAabb);
    da_NewtonUserMeshCollisionContinuousOverlapTest NewtonUserMeshCollisionContinuousOverlapTest;

    alias da_NewtonCreateCollisionFromSerialization =  NewtonCollision* function(const NewtonWorld* newtonWorld,  NewtonDeserializeCallback deserializeFunction,  void* serializeHandle);
    da_NewtonCreateCollisionFromSerialization NewtonCreateCollisionFromSerialization;

    alias da_NewtonCollisionSerialize =  void function(const NewtonWorld* newtonWorld, const NewtonCollision* collision,  NewtonSerializeCallback serializeFunction,  void* serializeHandle);
    da_NewtonCollisionSerialize NewtonCollisionSerialize;

    alias da_NewtonCollisionGetInfo =  void function(const NewtonCollision* collision,  NewtonCollisionInfoRecord* collisionInfo);
    da_NewtonCollisionGetInfo NewtonCollisionGetInfo;

    alias da_NewtonCreateHeightFieldCollision =  NewtonCollision* function(const NewtonWorld* newtonWorld,  int width,  int height,  int gridsDiagonals,  int elevationdatType, const void* elevationMap, const char* attributeMap,  dFloat verticalScale,  dFloat horizontalScale_x,  dFloat horizontalScale_z,  int shapeID);
    da_NewtonCreateHeightFieldCollision NewtonCreateHeightFieldCollision;

    alias da_NewtonHeightFieldSetUserRayCastCallback =  void function(const NewtonCollision* heightfieldCollision,  NewtonHeightFieldRayCastCallback rayHitCallback);
    da_NewtonHeightFieldSetUserRayCastCallback NewtonHeightFieldSetUserRayCastCallback;

    alias da_NewtonCreateTreeCollision =  NewtonCollision* function(const NewtonWorld* newtonWorld,  int shapeID);
    da_NewtonCreateTreeCollision NewtonCreateTreeCollision;

    alias da_NewtonCreateTreeCollisionFromMesh =  NewtonCollision* function(const NewtonWorld* newtonWorld, const NewtonMesh* mesh,  int shapeID);
    da_NewtonCreateTreeCollisionFromMesh NewtonCreateTreeCollisionFromMesh;

    alias da_NewtonTreeCollisionSetUserRayCastCallback =  void function(const NewtonCollision* treeCollision,  NewtonCollisionTreeRayCastCallback rayHitCallback);
    da_NewtonTreeCollisionSetUserRayCastCallback NewtonTreeCollisionSetUserRayCastCallback;

    alias da_NewtonTreeCollisionBeginBuild =  void function(const NewtonCollision* treeCollision);
    da_NewtonTreeCollisionBeginBuild NewtonTreeCollisionBeginBuild;

    alias da_NewtonTreeCollisionAddFace =  void function(const NewtonCollision* treeCollision,  int vertexCount, const dFloat* vertexPtr,  int strideInBytes,  int faceAttribute);
    da_NewtonTreeCollisionAddFace NewtonTreeCollisionAddFace;

    alias da_NewtonTreeCollisionEndBuild =  void function(const NewtonCollision* treeCollision,  int optimize);
    da_NewtonTreeCollisionEndBuild NewtonTreeCollisionEndBuild;

    alias da_NewtonTreeCollisionGetFaceAttribute =  int function(const NewtonCollision* treeCollision, const int* faceIndexArray,  int indexCount);
    da_NewtonTreeCollisionGetFaceAttribute NewtonTreeCollisionGetFaceAttribute;

    alias da_NewtonTreeCollisionSetFaceAttribute =  void function(const NewtonCollision* treeCollision, const int* faceIndexArray,  int indexCount,  int attribute);
    da_NewtonTreeCollisionSetFaceAttribute NewtonTreeCollisionSetFaceAttribute;

    alias da_NewtonTreeCollisionForEachFace =  void function(const NewtonCollision* treeCollision,  NewtonTreeCollisionFaceCallback forEachFaceCallback,  void* context);
    da_NewtonTreeCollisionForEachFace NewtonTreeCollisionForEachFace;

    alias da_NewtonTreeCollisionGetVertexListTriangleListInAABB =  int function(const NewtonCollision* treeCollision, const dFloat* p0, const dFloat* p1, const dFloat* * vertexArray,  int* vertexCount,  int* vertexStrideInBytes, const int* indexList,  int maxIndexCount, const int* faceAttribute);
    da_NewtonTreeCollisionGetVertexListTriangleListInAABB NewtonTreeCollisionGetVertexListTriangleListInAABB;

    alias da_NewtonStaticCollisionSetDebugCallback =  void function(const NewtonCollision* staticCollision,  NewtonTreeCollisionCallback userCallback);
    da_NewtonStaticCollisionSetDebugCallback NewtonStaticCollisionSetDebugCallback;

    alias da_NewtonCollisionCreateInstance =  NewtonCollision* function(const NewtonCollision* collision);
    da_NewtonCollisionCreateInstance NewtonCollisionCreateInstance;

    alias da_NewtonCollisionGetType =  int function(const NewtonCollision* collision);
    da_NewtonCollisionGetType NewtonCollisionGetType;

    alias da_NewtonCollisionIsConvexShape =  int function(const NewtonCollision* collision);
    da_NewtonCollisionIsConvexShape NewtonCollisionIsConvexShape;

    alias da_NewtonCollisionIsStaticShape =  int function(const NewtonCollision* collision);
    da_NewtonCollisionIsStaticShape NewtonCollisionIsStaticShape;

    alias da_NewtonCollisionSetUserData =  void function(const NewtonCollision* collision,  void* userData);
    da_NewtonCollisionSetUserData NewtonCollisionSetUserData;

    alias da_NewtonCollisionGetUserData =  void* function(const NewtonCollision* collision);
    da_NewtonCollisionGetUserData NewtonCollisionGetUserData;

    alias da_NewtonCollisionSetUserID =  void function(const NewtonCollision* collision,  long id);
    da_NewtonCollisionSetUserID NewtonCollisionSetUserID;

    alias da_NewtonCollisionGetUserID =  long function(const NewtonCollision* collision);
    da_NewtonCollisionGetUserID NewtonCollisionGetUserID;

    alias da_NewtonCollisionGetMaterial =  void function(const NewtonCollision* collision,  NewtonCollisionMaterial* userData);
    da_NewtonCollisionGetMaterial NewtonCollisionGetMaterial;

    alias da_NewtonCollisionSetMaterial =  void function(const NewtonCollision* collision, const NewtonCollisionMaterial* userData);
    da_NewtonCollisionSetMaterial NewtonCollisionSetMaterial;

    alias da_NewtonCollisionGetSubCollisionHandle =  void* function(const NewtonCollision* collision);
    da_NewtonCollisionGetSubCollisionHandle NewtonCollisionGetSubCollisionHandle;

    alias da_NewtonCollisionGetParentInstance =  NewtonCollision* function(const NewtonCollision* collision);
    da_NewtonCollisionGetParentInstance NewtonCollisionGetParentInstance;

    alias da_NewtonCollisionSetMatrix =  void function(const NewtonCollision* collision, const dFloat* matrix);
    da_NewtonCollisionSetMatrix NewtonCollisionSetMatrix;

    alias da_NewtonCollisionGetMatrix =  void function(const NewtonCollision* collision,  dFloat* matrix);
    da_NewtonCollisionGetMatrix NewtonCollisionGetMatrix;

    alias da_NewtonCollisionSetScale =  void function(const NewtonCollision* collision,  dFloat scaleX,  dFloat scaleY,  dFloat scaleZ);
    da_NewtonCollisionSetScale NewtonCollisionSetScale;

    alias da_NewtonCollisionGetScale =  void function(const NewtonCollision* collision,  dFloat* scaleX,  dFloat* scaleY,  dFloat* scaleZ);
    da_NewtonCollisionGetScale NewtonCollisionGetScale;

    alias da_NewtonDestroyCollision =  void function(const NewtonCollision* collision);
    da_NewtonDestroyCollision NewtonDestroyCollision;

    alias da_NewtonCollisionGetSkinThickness =  dFloat function(const NewtonCollision* collision);
    da_NewtonCollisionGetSkinThickness NewtonCollisionGetSkinThickness;

    alias da_NewtonCollisionSetSkinThickness =  void function(const NewtonCollision* collision,  dFloat thickness);
    da_NewtonCollisionSetSkinThickness NewtonCollisionSetSkinThickness;

    alias da_NewtonCollisionIntersectionTest =  int function(const NewtonWorld* newtonWorld, const NewtonCollision* collisionA, const dFloat* matrixA, const NewtonCollision* collisionB, const dFloat* matrixB,  int threadIndex);
    da_NewtonCollisionIntersectionTest NewtonCollisionIntersectionTest;

    alias da_NewtonCollisionPointDistance =  int function(const NewtonWorld* newtonWorld, const dFloat* point, const NewtonCollision* collision, const dFloat* matrix,  dFloat* contact,  dFloat* normal,  int threadIndex);
    da_NewtonCollisionPointDistance NewtonCollisionPointDistance;

    alias da_NewtonCollisionClosestPoint =  int function(const NewtonWorld* newtonWorld, const NewtonCollision* collisionA, const dFloat* matrixA, const NewtonCollision* collisionB, const dFloat* matrixB,  dFloat* contactA,  dFloat* contactB,  dFloat* normalAB,  int threadIndex);
    da_NewtonCollisionClosestPoint NewtonCollisionClosestPoint;

    alias da_NewtonCollisionCollide =  int function(const NewtonWorld* newtonWorld,  int maxSize, const NewtonCollision* collisionA, const dFloat* matrixA, const NewtonCollision* collisionB, const dFloat* matrixB,  dFloat* contacts,  dFloat* normals,  dFloat* penetration,  long* attributeA,  long* attributeB,  int threadIndex);
    da_NewtonCollisionCollide NewtonCollisionCollide;

    alias da_NewtonCollisionCollideContinue =  int function(const NewtonWorld* newtonWorld,  int maxSize,  dFloat timestep, const NewtonCollision* collisionA, const dFloat* matrixA, const dFloat* velocA, const dFloat* omegaA, const NewtonCollision* collisionB, const dFloat* matrixB, const dFloat* velocB, const dFloat* omegaB,  dFloat* timeOfImpact,  dFloat* contacts,  dFloat* normals,  dFloat* penetration,  long* attributeA,  long* attributeB,  int threadIndex);
    da_NewtonCollisionCollideContinue NewtonCollisionCollideContinue;

    alias da_NewtonCollisionSupportVertex =  void function(const NewtonCollision* collision, const dFloat* dir,  dFloat* vertex);
    da_NewtonCollisionSupportVertex NewtonCollisionSupportVertex;

    alias da_NewtonCollisionRayCast =  dFloat function(const NewtonCollision* collision, const dFloat* p0, const dFloat* p1,  dFloat* normal,  long* attribute);
    da_NewtonCollisionRayCast NewtonCollisionRayCast;

    alias da_NewtonCollisionCalculateAABB =  void function(const NewtonCollision* collision, const dFloat* matrix,  dFloat* p0,  dFloat* p1);
    da_NewtonCollisionCalculateAABB NewtonCollisionCalculateAABB;

    alias da_NewtonCollisionForEachPolygonDo =  void function(const NewtonCollision* collision, const dFloat* matrix,  NewtonCollisionIterator callback,  void* userData);
    da_NewtonCollisionForEachPolygonDo NewtonCollisionForEachPolygonDo;

    alias da_NewtonCollisionAggregateCreate =  void* function( NewtonWorld* world);
    da_NewtonCollisionAggregateCreate NewtonCollisionAggregateCreate;

    alias da_NewtonCollisionAggregateDestroy =  void function( void* aggregate);
    da_NewtonCollisionAggregateDestroy NewtonCollisionAggregateDestroy;

    alias da_NewtonCollisionAggregateAddBody =  void function( void* aggregate, const NewtonBody* _body);
    da_NewtonCollisionAggregateAddBody NewtonCollisionAggregateAddBody;

    alias da_NewtonCollisionAggregateRemoveBody =  void function( void* aggregate, const NewtonBody* _body);
    da_NewtonCollisionAggregateRemoveBody NewtonCollisionAggregateRemoveBody;

    alias da_NewtonCollisionAggregateGetSelfCollision =  int function( void* aggregate);
    da_NewtonCollisionAggregateGetSelfCollision NewtonCollisionAggregateGetSelfCollision;

    alias da_NewtonCollisionAggregateSetSelfCollision =  void function( void* aggregate,  int state);
    da_NewtonCollisionAggregateSetSelfCollision NewtonCollisionAggregateSetSelfCollision;

    alias da_NewtonSetEulerAngle =  void function(const dFloat* eulersAngles,  dFloat* matrix);
    da_NewtonSetEulerAngle NewtonSetEulerAngle;

    alias da_NewtonGetEulerAngle =  void function(const dFloat* matrix,  dFloat* eulersAngles0,  dFloat* eulersAngles1);
    da_NewtonGetEulerAngle NewtonGetEulerAngle;

    alias da_NewtonCalculateSpringDamperAcceleration =  dFloat function( dFloat dt,  dFloat ks,  dFloat x,  dFloat kd,  dFloat s);
    da_NewtonCalculateSpringDamperAcceleration NewtonCalculateSpringDamperAcceleration;

    alias da_NewtonCreateDynamicBody =  NewtonBody* function(const NewtonWorld* newtonWorld, const NewtonCollision* collision, const dFloat* matrix);
    da_NewtonCreateDynamicBody NewtonCreateDynamicBody;

    alias da_NewtonCreateKinematicBody =  NewtonBody* function(const NewtonWorld* newtonWorld, const NewtonCollision* collision, const dFloat* matrix);
    da_NewtonCreateKinematicBody NewtonCreateKinematicBody;

    alias da_NewtonCreateAsymetricDynamicBody =  NewtonBody* function(const NewtonWorld* newtonWorld, const NewtonCollision* collision, const dFloat* matrix);
    da_NewtonCreateAsymetricDynamicBody NewtonCreateAsymetricDynamicBody;

    alias da_NewtonDestroyBody =  void function(const NewtonBody* _body);
    da_NewtonDestroyBody NewtonDestroyBody;

    alias da_NewtonBodyGetSimulationState =  int function(const NewtonBody* _body);
    da_NewtonBodyGetSimulationState NewtonBodyGetSimulationState;

    alias da_NewtonBodySetSimulationState =  void function(const NewtonBody* bodyPtr, const int state);
    da_NewtonBodySetSimulationState NewtonBodySetSimulationState;

    alias da_NewtonBodyGetType =  int function(const NewtonBody* _body);
    da_NewtonBodyGetType NewtonBodyGetType;

    alias da_NewtonBodyGetCollidable =  int function(const NewtonBody* _body);
    da_NewtonBodyGetCollidable NewtonBodyGetCollidable;

    alias da_NewtonBodySetCollidable =  void function(const NewtonBody* _body,  int collidableState);
    da_NewtonBodySetCollidable NewtonBodySetCollidable;

    alias da_NewtonBodyAddForce =  void function(const NewtonBody* _body, const dFloat* force);
    da_NewtonBodyAddForce NewtonBodyAddForce;

    alias da_NewtonBodyAddTorque =  void function(const NewtonBody* _body, const dFloat* torque);
    da_NewtonBodyAddTorque NewtonBodyAddTorque;

    alias da_NewtonBodySetCentreOfMass =  void function(const NewtonBody* _body, const dFloat* com);
    da_NewtonBodySetCentreOfMass NewtonBodySetCentreOfMass;

    alias da_NewtonBodySetMassMatrix =  void function(const NewtonBody* _body,  dFloat mass,  dFloat Ixx,  dFloat Iyy,  dFloat Izz);
    da_NewtonBodySetMassMatrix NewtonBodySetMassMatrix;

    alias da_NewtonBodySetFullMassMatrix =  void function(const NewtonBody* _body,  dFloat mass, const dFloat* inertiaMatrix);
    da_NewtonBodySetFullMassMatrix NewtonBodySetFullMassMatrix;

    alias da_NewtonBodySetMassProperties =  void function(const NewtonBody* _body,  dFloat mass, const NewtonCollision* collision);
    da_NewtonBodySetMassProperties NewtonBodySetMassProperties;

    alias da_NewtonBodySetMatrix =  void function(const NewtonBody* _body, const dFloat* matrix);
    da_NewtonBodySetMatrix NewtonBodySetMatrix;

    alias da_NewtonBodySetMatrixNoSleep =  void function(const NewtonBody* _body, const dFloat* matrix);
    da_NewtonBodySetMatrixNoSleep NewtonBodySetMatrixNoSleep;

    alias da_NewtonBodySetMatrixRecursive =  void function(const NewtonBody* _body, const dFloat* matrix);
    da_NewtonBodySetMatrixRecursive NewtonBodySetMatrixRecursive;

    alias da_NewtonBodySetMaterialGroupID =  void function(const NewtonBody* _body,  int id);
    da_NewtonBodySetMaterialGroupID NewtonBodySetMaterialGroupID;

    alias da_NewtonBodySetContinuousCollisionMode =  void function(const NewtonBody* _body,  uint state);
    da_NewtonBodySetContinuousCollisionMode NewtonBodySetContinuousCollisionMode;

    alias da_NewtonBodySetJointRecursiveCollision =  void function(const NewtonBody* _body,  uint state);
    da_NewtonBodySetJointRecursiveCollision NewtonBodySetJointRecursiveCollision;

    alias da_NewtonBodySetOmega =  void function(const NewtonBody* _body, const dFloat* omega);
    da_NewtonBodySetOmega NewtonBodySetOmega;

    alias da_NewtonBodySetOmegaNoSleep =  void function(const NewtonBody* _body, const dFloat* omega);
    da_NewtonBodySetOmegaNoSleep NewtonBodySetOmegaNoSleep;

    alias da_NewtonBodySetVelocity =  void function(const NewtonBody* _body, const dFloat* velocity);
    da_NewtonBodySetVelocity NewtonBodySetVelocity;

    alias da_NewtonBodySetVelocityNoSleep =  void function(const NewtonBody* _body, const dFloat* velocity);
    da_NewtonBodySetVelocityNoSleep NewtonBodySetVelocityNoSleep;

    alias da_NewtonBodySetForce =  void function(const NewtonBody* _body, const dFloat* force);
    da_NewtonBodySetForce NewtonBodySetForce;

    alias da_NewtonBodySetTorque =  void function(const NewtonBody* _body, const dFloat* torque);
    da_NewtonBodySetTorque NewtonBodySetTorque;

    alias da_NewtonBodySetLinearDamping =  void function(const NewtonBody* _body,  dFloat linearDamp);
    da_NewtonBodySetLinearDamping NewtonBodySetLinearDamping;

    alias da_NewtonBodySetAngularDamping =  void function(const NewtonBody* _body, const dFloat* angularDamp);
    da_NewtonBodySetAngularDamping NewtonBodySetAngularDamping;

    alias da_NewtonBodySetCollision =  void function(const NewtonBody* _body, const NewtonCollision* collision);
    da_NewtonBodySetCollision NewtonBodySetCollision;

    alias da_NewtonBodySetCollisionScale =  void function(const NewtonBody* _body,  dFloat scaleX,  dFloat scaleY,  dFloat scaleZ);
    da_NewtonBodySetCollisionScale NewtonBodySetCollisionScale;

    alias da_NewtonBodyGetSleepState =  int function(const NewtonBody* _body);
    da_NewtonBodyGetSleepState NewtonBodyGetSleepState;

    alias da_NewtonBodySetSleepState =  void function(const NewtonBody* _body,  int state);
    da_NewtonBodySetSleepState NewtonBodySetSleepState;

    alias da_NewtonBodyGetAutoSleep =  int function(const NewtonBody* _body);
    da_NewtonBodyGetAutoSleep NewtonBodyGetAutoSleep;

    alias da_NewtonBodySetAutoSleep =  void function(const NewtonBody* _body,  int state);
    da_NewtonBodySetAutoSleep NewtonBodySetAutoSleep;

    alias da_NewtonBodyGetFreezeState =  int function(const NewtonBody* _body);
    da_NewtonBodyGetFreezeState NewtonBodyGetFreezeState;

    alias da_NewtonBodySetFreezeState =  void function(const NewtonBody* _body,  int state);
    da_NewtonBodySetFreezeState NewtonBodySetFreezeState;

    alias da_NewtonBodyGetGyroscopicTorque =  int function(const NewtonBody* _body);
    da_NewtonBodyGetGyroscopicTorque NewtonBodyGetGyroscopicTorque;

    alias da_NewtonBodySetGyroscopicTorque =  void function(const NewtonBody* _body,  int state);
    da_NewtonBodySetGyroscopicTorque NewtonBodySetGyroscopicTorque;

    alias da_NewtonBodySetDestructorCallback =  void function(const NewtonBody* _body,  NewtonBodyDestructor callback);
    da_NewtonBodySetDestructorCallback NewtonBodySetDestructorCallback;

    alias da_NewtonBodyGetDestructorCallback =  NewtonBodyDestructor function(const NewtonBody* _body);
    da_NewtonBodyGetDestructorCallback NewtonBodyGetDestructorCallback;

    alias da_NewtonBodySetTransformCallback =  void function(const NewtonBody* _body,  NewtonSetTransform callback);
    da_NewtonBodySetTransformCallback NewtonBodySetTransformCallback;

    alias da_NewtonBodyGetTransformCallback =  NewtonSetTransform function(const NewtonBody* _body);
    da_NewtonBodyGetTransformCallback NewtonBodyGetTransformCallback;

    alias da_NewtonBodySetForceAndTorqueCallback =  void function(const NewtonBody* _body,  NewtonApplyForceAndTorque callback);
    da_NewtonBodySetForceAndTorqueCallback NewtonBodySetForceAndTorqueCallback;

    alias da_NewtonBodyGetForceAndTorqueCallback =  NewtonApplyForceAndTorque function(const NewtonBody* _body);
    da_NewtonBodyGetForceAndTorqueCallback NewtonBodyGetForceAndTorqueCallback;

    alias da_NewtonBodyGetID =  int function(const NewtonBody* _body);
    da_NewtonBodyGetID NewtonBodyGetID;

    alias da_NewtonBodySetUserData =  void function(const NewtonBody* _body,  void* userData);
    da_NewtonBodySetUserData NewtonBodySetUserData;

    alias da_NewtonBodyGetUserData =  void* function(const NewtonBody* _body);
    da_NewtonBodyGetUserData NewtonBodyGetUserData;

    alias da_NewtonBodyGetWorld =  NewtonWorld* function(const NewtonBody* _body);
    da_NewtonBodyGetWorld NewtonBodyGetWorld;

    alias da_NewtonBodyGetCollision =  NewtonCollision* function(const NewtonBody* _body);
    da_NewtonBodyGetCollision NewtonBodyGetCollision;

    alias da_NewtonBodyGetMaterialGroupID =  int function(const NewtonBody* _body);
    da_NewtonBodyGetMaterialGroupID NewtonBodyGetMaterialGroupID;

    alias da_NewtonBodyGetSerializedID =  int function(const NewtonBody* _body);
    da_NewtonBodyGetSerializedID NewtonBodyGetSerializedID;

    alias da_NewtonBodyGetContinuousCollisionMode =  int function(const NewtonBody* _body);
    da_NewtonBodyGetContinuousCollisionMode NewtonBodyGetContinuousCollisionMode;

    alias da_NewtonBodyGetJointRecursiveCollision =  int function(const NewtonBody* _body);
    da_NewtonBodyGetJointRecursiveCollision NewtonBodyGetJointRecursiveCollision;

    alias da_NewtonBodyGetPosition =  void function(const NewtonBody* _body,  dFloat* pos);
    da_NewtonBodyGetPosition NewtonBodyGetPosition;

    alias da_NewtonBodyGetMatrix =  void function(const NewtonBody* _body,  dFloat* matrix);
    da_NewtonBodyGetMatrix NewtonBodyGetMatrix;

    alias da_NewtonBodyGetRotation =  void function(const NewtonBody* _body,  dFloat* rotation);
    da_NewtonBodyGetRotation NewtonBodyGetRotation;

    alias da_NewtonBodyGetMass =  void function(const NewtonBody* _body,  dFloat* mass,  dFloat* Ixx,  dFloat* Iyy,  dFloat* Izz);
    da_NewtonBodyGetMass NewtonBodyGetMass;

    alias da_NewtonBodyGetInvMass =  void function(const NewtonBody* _body,  dFloat* invMass,  dFloat* invIxx,  dFloat* invIyy,  dFloat* invIzz);
    da_NewtonBodyGetInvMass NewtonBodyGetInvMass;

    alias da_NewtonBodyGetInertiaMatrix =  void function(const NewtonBody* _body,  dFloat* inertiaMatrix);
    da_NewtonBodyGetInertiaMatrix NewtonBodyGetInertiaMatrix;

    alias da_NewtonBodyGetInvInertiaMatrix =  void function(const NewtonBody* _body,  dFloat* invInertiaMatrix);
    da_NewtonBodyGetInvInertiaMatrix NewtonBodyGetInvInertiaMatrix;

    alias da_NewtonBodyGetOmega =  void function(const NewtonBody* _body,  dFloat* vector);
    da_NewtonBodyGetOmega NewtonBodyGetOmega;

    alias da_NewtonBodyGetVelocity =  void function(const NewtonBody* _body,  dFloat* vector);
    da_NewtonBodyGetVelocity NewtonBodyGetVelocity;

    alias da_NewtonBodyGetAlpha =  void function(const NewtonBody* _body,  dFloat* vector);
    da_NewtonBodyGetAlpha NewtonBodyGetAlpha;

    alias da_NewtonBodyGetAcceleration =  void function(const NewtonBody* _body,  dFloat* vector);
    da_NewtonBodyGetAcceleration NewtonBodyGetAcceleration;

    alias da_NewtonBodyGetForce =  void function(const NewtonBody* _body,  dFloat* vector);
    da_NewtonBodyGetForce NewtonBodyGetForce;

    alias da_NewtonBodyGetTorque =  void function(const NewtonBody* _body,  dFloat* vector);
    da_NewtonBodyGetTorque NewtonBodyGetTorque;

    alias da_NewtonBodyGetCentreOfMass =  void function(const NewtonBody* _body,  dFloat* com);
    da_NewtonBodyGetCentreOfMass NewtonBodyGetCentreOfMass;

    alias da_NewtonBodyGetPointVelocity =  void function(const NewtonBody* _body, const dFloat* point,  dFloat* velocOut);
    da_NewtonBodyGetPointVelocity NewtonBodyGetPointVelocity;

    alias da_NewtonBodyApplyImpulsePair =  void function(const NewtonBody* _body,  dFloat* linearImpulse,  dFloat* angularImpulse,  dFloat timestep);
    da_NewtonBodyApplyImpulsePair NewtonBodyApplyImpulsePair;

    alias da_NewtonBodyAddImpulse =  void function(const NewtonBody* _body, const dFloat* pointDeltaVeloc, const dFloat* pointPosit,  dFloat timestep);
    da_NewtonBodyAddImpulse NewtonBodyAddImpulse;

    alias da_NewtonBodyApplyImpulseArray =  void function(const NewtonBody* _body,  int impuleCount,  int strideInByte, const dFloat* impulseArray, const dFloat* pointArray,  dFloat timestep);
    da_NewtonBodyApplyImpulseArray NewtonBodyApplyImpulseArray;

    alias da_NewtonBodyIntegrateVelocity =  void function(const NewtonBody* _body,  dFloat timestep);
    da_NewtonBodyIntegrateVelocity NewtonBodyIntegrateVelocity;

    alias da_NewtonBodyGetLinearDamping =  dFloat function(const NewtonBody* _body);
    da_NewtonBodyGetLinearDamping NewtonBodyGetLinearDamping;

    alias da_NewtonBodyGetAngularDamping =  void function(const NewtonBody* _body,  dFloat* vector);
    da_NewtonBodyGetAngularDamping NewtonBodyGetAngularDamping;

    alias da_NewtonBodyGetAABB =  void function(const NewtonBody* _body,  dFloat* p0,  dFloat* p1);
    da_NewtonBodyGetAABB NewtonBodyGetAABB;

    alias da_NewtonBodyGetFirstJoint =  NewtonJoint* function(const NewtonBody* _body);
    da_NewtonBodyGetFirstJoint NewtonBodyGetFirstJoint;

    alias da_NewtonBodyGetNextJoint =  NewtonJoint* function(const NewtonBody* _body, const NewtonJoint* joint);
    da_NewtonBodyGetNextJoint NewtonBodyGetNextJoint;

    alias da_NewtonBodyGetFirstContactJoint =  NewtonJoint* function(const NewtonBody* _body);
    da_NewtonBodyGetFirstContactJoint NewtonBodyGetFirstContactJoint;

    alias da_NewtonBodyGetNextContactJoint =  NewtonJoint* function(const NewtonBody* _body, const NewtonJoint* contactJoint);
    da_NewtonBodyGetNextContactJoint NewtonBodyGetNextContactJoint;

    alias da_NewtonBodyFindContact =  NewtonJoint* function(const NewtonBody* body0, const NewtonBody* body1);
    da_NewtonBodyFindContact NewtonBodyFindContact;

    alias da_NewtonContactJointGetFirstContact =  void* function(const NewtonJoint* contactJoint);
    da_NewtonContactJointGetFirstContact NewtonContactJointGetFirstContact;

    alias da_NewtonContactJointGetNextContact =  void* function(const NewtonJoint* contactJoint,  void* contact);
    da_NewtonContactJointGetNextContact NewtonContactJointGetNextContact;

    alias da_NewtonContactJointGetContactCount =  int function(const NewtonJoint* contactJoint);
    da_NewtonContactJointGetContactCount NewtonContactJointGetContactCount;

    alias da_NewtonContactJointRemoveContact =  void function(const NewtonJoint* contactJoint,  void* contact);
    da_NewtonContactJointRemoveContact NewtonContactJointRemoveContact;

    alias da_NewtonContactJointGetClosestDistance =  dFloat function(const NewtonJoint* contactJoint);
    da_NewtonContactJointGetClosestDistance NewtonContactJointGetClosestDistance;

    alias da_NewtonContactJointResetSelftJointCollision =  void function(const NewtonJoint* contactJoint);
    da_NewtonContactJointResetSelftJointCollision NewtonContactJointResetSelftJointCollision;

    alias da_NewtonContactJointResetIntraJointCollision =  void function(const NewtonJoint* contactJoint);
    da_NewtonContactJointResetIntraJointCollision NewtonContactJointResetIntraJointCollision;

    alias da_NewtonContactGetMaterial =  NewtonMaterial* function(const void* contact);
    da_NewtonContactGetMaterial NewtonContactGetMaterial;

    alias da_NewtonContactGetCollision0 =  NewtonCollision* function(const void* contact);
    da_NewtonContactGetCollision0 NewtonContactGetCollision0;

    alias da_NewtonContactGetCollision1 =  NewtonCollision* function(const void* contact);
    da_NewtonContactGetCollision1 NewtonContactGetCollision1;

    alias da_NewtonContactGetCollisionID0 =  void* function(const void* contact);
    da_NewtonContactGetCollisionID0 NewtonContactGetCollisionID0;

    alias da_NewtonContactGetCollisionID1 =  void* function(const void* contact);
    da_NewtonContactGetCollisionID1 NewtonContactGetCollisionID1;

    alias da_NewtonJointGetUserData =  void* function(const NewtonJoint* joint);
    da_NewtonJointGetUserData NewtonJointGetUserData;

    alias da_NewtonJointSetUserData =  void function(const NewtonJoint* joint,  void* userData);
    da_NewtonJointSetUserData NewtonJointSetUserData;

    alias da_NewtonJointGetBody0 =  NewtonBody* function(const NewtonJoint* joint);
    da_NewtonJointGetBody0 NewtonJointGetBody0;

    alias da_NewtonJointGetBody1 =  NewtonBody* function(const NewtonJoint* joint);
    da_NewtonJointGetBody1 NewtonJointGetBody1;

    alias da_NewtonJointGetInfo =  void function(const NewtonJoint* joint,  NewtonJointRecord* info);
    da_NewtonJointGetInfo NewtonJointGetInfo;

    alias da_NewtonJointGetCollisionState =  int function(const NewtonJoint* joint);
    da_NewtonJointGetCollisionState NewtonJointGetCollisionState;

    alias da_NewtonJointSetCollisionState =  void function(const NewtonJoint* joint,  int state);
    da_NewtonJointSetCollisionState NewtonJointSetCollisionState;

    alias da_NewtonJointGetStiffness =  dFloat function(const NewtonJoint* joint);
    da_NewtonJointGetStiffness NewtonJointGetStiffness;

    alias da_NewtonJointSetStiffness =  void function(const NewtonJoint* joint,  dFloat state);
    da_NewtonJointSetStiffness NewtonJointSetStiffness;

    alias da_NewtonDestroyJoint =  void function(const NewtonWorld* newtonWorld, const NewtonJoint* joint);
    da_NewtonDestroyJoint NewtonDestroyJoint;

    alias da_NewtonJointSetDestructor =  void function(const NewtonJoint* joint,  NewtonConstraintDestructor destructor);
    da_NewtonJointSetDestructor NewtonJointSetDestructor;

    alias da_NewtonJointIsActive =  int function(const NewtonJoint* joint);
    da_NewtonJointIsActive NewtonJointIsActive;

    alias da_NewtonCreateMassSpringDamperSystem =  NewtonCollision* function(const NewtonWorld* newtonWorld,  int shapeID, const dFloat* points,  int pointCount,  int strideInBytes, const dFloat* pointMass, const int* links,  int linksCount, const dFloat* linksSpring, const dFloat* linksDamper);
    da_NewtonCreateMassSpringDamperSystem NewtonCreateMassSpringDamperSystem;

    alias da_NewtonCreateDeformableSolid =  NewtonCollision* function(const NewtonWorld* newtonWorld, const NewtonMesh* mesh,  int shapeID);
    da_NewtonCreateDeformableSolid NewtonCreateDeformableSolid;

    alias da_NewtonDeformableMeshGetParticleCount =  int function(const NewtonCollision* deformableMesh);
    da_NewtonDeformableMeshGetParticleCount NewtonDeformableMeshGetParticleCount;

    alias da_NewtonDeformableMeshGetParticleStrideInBytes =  int function(const NewtonCollision* deformableMesh);
    da_NewtonDeformableMeshGetParticleStrideInBytes NewtonDeformableMeshGetParticleStrideInBytes;

    alias da_NewtonDeformableMeshGetParticleArray = const dFloat* function(const NewtonCollision* deformableMesh);
    da_NewtonDeformableMeshGetParticleArray NewtonDeformableMeshGetParticleArray;

    alias da_NewtonConstraintCreateBall =  NewtonJoint* function(const NewtonWorld* newtonWorld, const dFloat* pivotPoint, const NewtonBody* childBody, const NewtonBody* parentBody);
    da_NewtonConstraintCreateBall NewtonConstraintCreateBall;

    alias da_NewtonBallSetUserCallback =  void function(const NewtonJoint* ball,  NewtonBallCallback callback);
    da_NewtonBallSetUserCallback NewtonBallSetUserCallback;

    alias da_NewtonBallGetJointAngle =  void function(const NewtonJoint* ball,  dFloat* angle);
    da_NewtonBallGetJointAngle NewtonBallGetJointAngle;

    alias da_NewtonBallGetJointOmega =  void function(const NewtonJoint* ball,  dFloat* omega);
    da_NewtonBallGetJointOmega NewtonBallGetJointOmega;

    alias da_NewtonBallGetJointForce =  void function(const NewtonJoint* ball,  dFloat* force);
    da_NewtonBallGetJointForce NewtonBallGetJointForce;

    alias da_NewtonBallSetConeLimits =  void function(const NewtonJoint* ball, const dFloat* pin,  dFloat maxConeAngle,  dFloat maxTwistAngle);
    da_NewtonBallSetConeLimits NewtonBallSetConeLimits;

    /*
    alias da_NewtonConstraintCreateHinge = NewtonJoint* function(const NewtonWorld* newtonWorld, const dFloat* pivotPoint, const dFloat* pinDir, const NewtonBody* childBody, const NewtonBody* parentBody);
    da_NewtonConstraintCreateHinge NewtonConstraintCreateHinge;

    alias da_NewtonHingeSetUserCallback = void function(const NewtonJoint* hinge, NewtonHingeCallback callback);
    da_NewtonHingeSetUserCallback NewtonHingeSetUserCallback;

    alias da_NewtonHingeGetJointAngle = dFloat function(const NewtonJoint* hinge);
    da_NewtonHingeGetJointAngle NewtonHingeGetJointAngle;
    
    alias da_NewtonHingeGetJointOmega = dFloat function(const NewtonJoint* hinge);
    da_NewtonHingeGetJointOmega NewtonHingeGetJointOmega;
    
    alias da_NewtonHingeGetJointForce = void function(const NewtonJoint* hinge, const dFloat* force);
    da_NewtonHingeGetJointForce NewtonHingeGetJointForce;
    
    alias da_NewtonHingeCalculateStopAlpha = dFloat function(const NewtonJoint* hinge, const NewtonHingeSliderUpdateDesc* desc, dFloat angle);
    da_NewtonHingeCalculateStopAlpha NewtonHingeCalculateStopAlpha;
    */
    
    alias da_NewtonConstraintCreateSlider =  NewtonJoint* function(const NewtonWorld* newtonWorld, const dFloat* pivotPoint, const dFloat* pinDir, const NewtonBody* childBody, const NewtonBody* parentBody);
    da_NewtonConstraintCreateSlider NewtonConstraintCreateSlider;

    alias da_NewtonSliderSetUserCallback =  void function(const NewtonJoint* slider,  NewtonSliderCallback callback);
    da_NewtonSliderSetUserCallback NewtonSliderSetUserCallback;

    alias da_NewtonSliderGetJointPosit =  dFloat function(const NewtonJoint* slider);
    da_NewtonSliderGetJointPosit NewtonSliderGetJointPosit;

    alias da_NewtonSliderGetJointVeloc =  dFloat function(const NewtonJoint* slider);
    da_NewtonSliderGetJointVeloc NewtonSliderGetJointVeloc;

    alias da_NewtonSliderGetJointForce =  void function(const NewtonJoint* slider,  dFloat* force);
    da_NewtonSliderGetJointForce NewtonSliderGetJointForce;

    alias da_NewtonSliderCalculateStopAccel =  dFloat function(const NewtonJoint* slider, const NewtonHingeSliderUpdateDesc* desc,  dFloat position);
    da_NewtonSliderCalculateStopAccel NewtonSliderCalculateStopAccel;

    alias da_NewtonConstraintCreateCorkscrew =  NewtonJoint* function(const NewtonWorld* newtonWorld, const dFloat* pivotPoint, const dFloat* pinDir, const NewtonBody* childBody, const NewtonBody* parentBody);
    da_NewtonConstraintCreateCorkscrew NewtonConstraintCreateCorkscrew;

    alias da_NewtonCorkscrewSetUserCallback =  void function(const NewtonJoint* corkscrew,  NewtonCorkscrewCallback callback);
    da_NewtonCorkscrewSetUserCallback NewtonCorkscrewSetUserCallback;

    alias da_NewtonCorkscrewGetJointPosit =  dFloat function(const NewtonJoint* corkscrew);
    da_NewtonCorkscrewGetJointPosit NewtonCorkscrewGetJointPosit;

    alias da_NewtonCorkscrewGetJointAngle =  dFloat function(const NewtonJoint* corkscrew);
    da_NewtonCorkscrewGetJointAngle NewtonCorkscrewGetJointAngle;

    alias da_NewtonCorkscrewGetJointVeloc =  dFloat function(const NewtonJoint* corkscrew);
    da_NewtonCorkscrewGetJointVeloc NewtonCorkscrewGetJointVeloc;

    alias da_NewtonCorkscrewGetJointOmega =  dFloat function(const NewtonJoint* corkscrew);
    da_NewtonCorkscrewGetJointOmega NewtonCorkscrewGetJointOmega;

    alias da_NewtonCorkscrewGetJointForce =  void function(const NewtonJoint* corkscrew,  dFloat* force);
    da_NewtonCorkscrewGetJointForce NewtonCorkscrewGetJointForce;

    alias da_NewtonCorkscrewCalculateStopAlpha =  dFloat function(const NewtonJoint* corkscrew, const NewtonHingeSliderUpdateDesc* desc,  dFloat angle);
    da_NewtonCorkscrewCalculateStopAlpha NewtonCorkscrewCalculateStopAlpha;

    alias da_NewtonCorkscrewCalculateStopAccel =  dFloat function(const NewtonJoint* corkscrew, const NewtonHingeSliderUpdateDesc* desc,  dFloat position);
    da_NewtonCorkscrewCalculateStopAccel NewtonCorkscrewCalculateStopAccel;

    alias da_NewtonConstraintCreateUniversal =  NewtonJoint* function(const NewtonWorld* newtonWorld, const dFloat* pivotPoint, const dFloat* pinDir0, const dFloat* pinDir1, const NewtonBody* childBody, const NewtonBody* parentBody);
    da_NewtonConstraintCreateUniversal NewtonConstraintCreateUniversal;

    alias da_NewtonUniversalSetUserCallback =  void function(const NewtonJoint* universal,  NewtonUniversalCallback callback);
    da_NewtonUniversalSetUserCallback NewtonUniversalSetUserCallback;

    alias da_NewtonUniversalGetJointAngle0 =  dFloat function(const NewtonJoint* universal);
    da_NewtonUniversalGetJointAngle0 NewtonUniversalGetJointAngle0;

    alias da_NewtonUniversalGetJointAngle1 =  dFloat function(const NewtonJoint* universal);
    da_NewtonUniversalGetJointAngle1 NewtonUniversalGetJointAngle1;

    alias da_NewtonUniversalGetJointOmega0 =  dFloat function(const NewtonJoint* universal);
    da_NewtonUniversalGetJointOmega0 NewtonUniversalGetJointOmega0;

    alias da_NewtonUniversalGetJointOmega1 =  dFloat function(const NewtonJoint* universal);
    da_NewtonUniversalGetJointOmega1 NewtonUniversalGetJointOmega1;

    alias da_NewtonUniversalGetJointForce =  void function(const NewtonJoint* universal,  dFloat* force);
    da_NewtonUniversalGetJointForce NewtonUniversalGetJointForce;

    alias da_NewtonUniversalCalculateStopAlpha0 =  dFloat function(const NewtonJoint* universal, const NewtonHingeSliderUpdateDesc* desc,  dFloat angle);
    da_NewtonUniversalCalculateStopAlpha0 NewtonUniversalCalculateStopAlpha0;

    alias da_NewtonUniversalCalculateStopAlpha1 =  dFloat function(const NewtonJoint* universal, const NewtonHingeSliderUpdateDesc* desc,  dFloat angle);
    da_NewtonUniversalCalculateStopAlpha1 NewtonUniversalCalculateStopAlpha1;

    alias da_NewtonConstraintCreateUpVector =  NewtonJoint* function(const NewtonWorld* newtonWorld, const dFloat* pinDir, const NewtonBody* _body);
    da_NewtonConstraintCreateUpVector NewtonConstraintCreateUpVector;

    alias da_NewtonUpVectorGetPin =  void function(const NewtonJoint* upVector,  dFloat* pin);
    da_NewtonUpVectorGetPin NewtonUpVectorGetPin;

    alias da_NewtonUpVectorSetPin =  void function(const NewtonJoint* upVector, const dFloat* pin);
    da_NewtonUpVectorSetPin NewtonUpVectorSetPin;

    alias da_NewtonConstraintCreateUserJoint =  NewtonJoint* function(const NewtonWorld* newtonWorld,  int maxDOF,  NewtonUserBilateralCallback callback, const NewtonBody* childBody, const NewtonBody* parentBody);
    da_NewtonConstraintCreateUserJoint NewtonConstraintCreateUserJoint;

    alias da_NewtonUserJointGetSolverModel =  int function(const NewtonJoint* joint);
    da_NewtonUserJointGetSolverModel NewtonUserJointGetSolverModel;

    alias da_NewtonUserJointSetSolverModel =  void function(const NewtonJoint* joint,  int model);
    da_NewtonUserJointSetSolverModel NewtonUserJointSetSolverModel;

    alias da_NewtonUserJointMassScale =  void function(const NewtonJoint* joint,  dFloat scaleBody0,  dFloat scaleBody1);
    da_NewtonUserJointMassScale NewtonUserJointMassScale;

    alias da_NewtonUserJointSetFeedbackCollectorCallback =  void function(const NewtonJoint* joint,  NewtonUserBilateralCallback getFeedback);
    da_NewtonUserJointSetFeedbackCollectorCallback NewtonUserJointSetFeedbackCollectorCallback;

    alias da_NewtonUserJointAddLinearRow =  void function(const NewtonJoint* joint, const dFloat* pivot0, const dFloat* pivot1, const dFloat* dir);
    da_NewtonUserJointAddLinearRow NewtonUserJointAddLinearRow;

    alias da_NewtonUserJointAddAngularRow =  void function(const NewtonJoint* joint,  dFloat relativeAngle, const dFloat* dir);
    da_NewtonUserJointAddAngularRow NewtonUserJointAddAngularRow;

    alias da_NewtonUserJointAddGeneralRow =  void function(const NewtonJoint* joint, const dFloat* jacobian0, const dFloat* jacobian1);
    da_NewtonUserJointAddGeneralRow NewtonUserJointAddGeneralRow;

    alias da_NewtonUserJointSetRowMinimumFriction =  void function(const NewtonJoint* joint,  dFloat friction);
    da_NewtonUserJointSetRowMinimumFriction NewtonUserJointSetRowMinimumFriction;

    alias da_NewtonUserJointSetRowMaximumFriction =  void function(const NewtonJoint* joint,  dFloat friction);
    da_NewtonUserJointSetRowMaximumFriction NewtonUserJointSetRowMaximumFriction;

    alias da_NewtonUserJointCalculateRowZeroAcceleration =  dFloat function(const NewtonJoint* joint);
    da_NewtonUserJointCalculateRowZeroAcceleration NewtonUserJointCalculateRowZeroAcceleration;

    alias da_NewtonUserJointGetRowAcceleration =  dFloat function(const NewtonJoint* joint);
    da_NewtonUserJointGetRowAcceleration NewtonUserJointGetRowAcceleration;

    alias da_NewtonUserJointGetRowJacobian =  void function(const NewtonJoint* joint,  dFloat* linear0,  dFloat* angula0,  dFloat* linear1,  dFloat* angula1);
    da_NewtonUserJointGetRowJacobian NewtonUserJointGetRowJacobian;

    alias da_NewtonUserJointSetRowAcceleration =  void function(const NewtonJoint* joint,  dFloat acceleration);
    da_NewtonUserJointSetRowAcceleration NewtonUserJointSetRowAcceleration;

    alias da_NewtonUserJointSetRowMassDependentSpringDamperAcceleration = void function(const NewtonJoint* joint, dFloat spring, dFloat damper);
    da_NewtonUserJointSetRowMassDependentSpringDamperAcceleration NewtonUserJointSetRowMassDependentSpringDamperAcceleration;

    alias da_NewtonUserJointSetRowMassIndependentSpringDamperAcceleration = void function(const NewtonJoint* joint, dFloat rowStiffness, dFloat spring, dFloat damper);
    da_NewtonUserJointSetRowMassIndependentSpringDamperAcceleration NewtonUserJointSetRowMassIndependentSpringDamperAcceleration;

    alias da_NewtonUserJointSetRowStiffness =  void function(const NewtonJoint* joint,  dFloat stiffness);
    da_NewtonUserJointSetRowStiffness NewtonUserJointSetRowStiffness;

    alias da_NewtonUserJoinRowsCount =  int function(const NewtonJoint* joint);
    da_NewtonUserJoinRowsCount NewtonUserJoinRowsCount;

    alias da_NewtonUserJointGetGeneralRow =  void function(const NewtonJoint* joint,  int index,  dFloat* jacobian0,  dFloat* jacobian1);
    da_NewtonUserJointGetGeneralRow NewtonUserJointGetGeneralRow;

    alias da_NewtonUserJointGetRowForce =  dFloat function(const NewtonJoint* joint,  int row);
    da_NewtonUserJointGetRowForce NewtonUserJointGetRowForce;

    alias da_NewtonMeshCreate =  NewtonMesh* function(const NewtonWorld* newtonWorld);
    da_NewtonMeshCreate NewtonMeshCreate;

    alias da_NewtonMeshCreateFromMesh =  NewtonMesh* function(const NewtonMesh* mesh);
    da_NewtonMeshCreateFromMesh NewtonMeshCreateFromMesh;

    alias da_NewtonMeshCreateFromCollision =  NewtonMesh* function(const NewtonCollision* collision);
    da_NewtonMeshCreateFromCollision NewtonMeshCreateFromCollision;

    alias da_NewtonMeshCreateTetrahedraIsoSurface =  NewtonMesh* function(const NewtonMesh* mesh);
    da_NewtonMeshCreateTetrahedraIsoSurface NewtonMeshCreateTetrahedraIsoSurface;

    alias da_NewtonMeshCreateConvexHull =  NewtonMesh* function(const NewtonWorld* newtonWorld,  int pointCount, const dFloat* vertexCloud,  int strideInBytes,  dFloat tolerance);
    da_NewtonMeshCreateConvexHull NewtonMeshCreateConvexHull;

    alias da_NewtonMeshCreateVoronoiConvexDecomposition =  NewtonMesh* function(const NewtonWorld* newtonWorld,  int pointCount, const dFloat* vertexCloud,  int strideInBytes,  int materialID, const dFloat* textureMatrix);
    da_NewtonMeshCreateVoronoiConvexDecomposition NewtonMeshCreateVoronoiConvexDecomposition;

    alias da_NewtonMeshCreateFromSerialization =  NewtonMesh* function(const NewtonWorld* newtonWorld,  NewtonDeserializeCallback deserializeFunction,  void* serializeHandle);
    da_NewtonMeshCreateFromSerialization NewtonMeshCreateFromSerialization;

    alias da_NewtonMeshDestroy =  void function(const NewtonMesh* mesh);
    da_NewtonMeshDestroy NewtonMeshDestroy;

    alias da_NewtonMeshSerialize =  void function(const NewtonMesh* mesh,  NewtonSerializeCallback serializeFunction,  void* serializeHandle);
    da_NewtonMeshSerialize NewtonMeshSerialize;

    alias da_NewtonMeshSaveOFF =  void function(const NewtonMesh* mesh, const char* filename);
    da_NewtonMeshSaveOFF NewtonMeshSaveOFF;

    alias da_NewtonMeshLoadOFF =  NewtonMesh* function(const NewtonWorld* newtonWorld, const char* filename);
    da_NewtonMeshLoadOFF NewtonMeshLoadOFF;

    alias da_NewtonMeshLoadTetrahedraMesh =  NewtonMesh* function(const NewtonWorld* newtonWorld, const char* filename);
    da_NewtonMeshLoadTetrahedraMesh NewtonMeshLoadTetrahedraMesh;

    alias da_NewtonMeshFlipWinding =  void function(const NewtonMesh* mesh);
    da_NewtonMeshFlipWinding NewtonMeshFlipWinding;

    alias da_NewtonMeshApplyTransform =  void function(const NewtonMesh* mesh, const dFloat* matrix);
    da_NewtonMeshApplyTransform NewtonMeshApplyTransform;

    alias da_NewtonMeshCalculateOOBB =  void function(const NewtonMesh* mesh,  dFloat* matrix,  dFloat* x,  dFloat* y,  dFloat* z);
    da_NewtonMeshCalculateOOBB NewtonMeshCalculateOOBB;

    alias da_NewtonMeshCalculateVertexNormals =  void function(const NewtonMesh* mesh,  dFloat angleInRadians);
    da_NewtonMeshCalculateVertexNormals NewtonMeshCalculateVertexNormals;

    alias da_NewtonMeshApplySphericalMapping =  void function(const NewtonMesh* mesh,  int material, const dFloat* aligmentMatrix);
    da_NewtonMeshApplySphericalMapping NewtonMeshApplySphericalMapping;

    alias da_NewtonMeshApplyCylindricalMapping =  void function(const NewtonMesh* mesh,  int cylinderMaterial,  int capMaterial, const dFloat* aligmentMatrix);
    da_NewtonMeshApplyCylindricalMapping NewtonMeshApplyCylindricalMapping;

    alias da_NewtonMeshApplyBoxMapping =  void function(const NewtonMesh* mesh,  int frontMaterial,  int sideMaterial,  int topMaterial, const dFloat* aligmentMatrix);
    da_NewtonMeshApplyBoxMapping NewtonMeshApplyBoxMapping;

    alias da_NewtonMeshApplyAngleBasedMapping =  void function(const NewtonMesh* mesh,  int material,  NewtonReportProgress reportPrograssCallback,  void* reportPrgressUserData,  dFloat* aligmentMatrix);
    da_NewtonMeshApplyAngleBasedMapping NewtonMeshApplyAngleBasedMapping;

    alias da_NewtonCreateTetrahedraLinearBlendSkinWeightsChannel =  void function(const NewtonMesh* tetrahedraMesh,  NewtonMesh* skinMesh);
    da_NewtonCreateTetrahedraLinearBlendSkinWeightsChannel NewtonCreateTetrahedraLinearBlendSkinWeightsChannel;

    alias da_NewtonMeshOptimize =  void function(const NewtonMesh* mesh);
    da_NewtonMeshOptimize NewtonMeshOptimize;

    alias da_NewtonMeshOptimizePoints =  void function(const NewtonMesh* mesh);
    da_NewtonMeshOptimizePoints NewtonMeshOptimizePoints;

    alias da_NewtonMeshOptimizeVertex =  void function(const NewtonMesh* mesh);
    da_NewtonMeshOptimizeVertex NewtonMeshOptimizeVertex;

    alias da_NewtonMeshIsOpenMesh =  int function(const NewtonMesh* mesh);
    da_NewtonMeshIsOpenMesh NewtonMeshIsOpenMesh;

    alias da_NewtonMeshFixTJoints =  void function(const NewtonMesh* mesh);
    da_NewtonMeshFixTJoints NewtonMeshFixTJoints;

    alias da_NewtonMeshPolygonize =  void function(const NewtonMesh* mesh);
    da_NewtonMeshPolygonize NewtonMeshPolygonize;

    alias da_NewtonMeshTriangulate =  void function(const NewtonMesh* mesh);
    da_NewtonMeshTriangulate NewtonMeshTriangulate;

    alias da_NewtonMeshUnion =  NewtonMesh* function(const NewtonMesh* mesh, const NewtonMesh* clipper, const dFloat* clipperMatrix);
    da_NewtonMeshUnion NewtonMeshUnion;

    alias da_NewtonMeshDifference =  NewtonMesh* function(const NewtonMesh* mesh, const NewtonMesh* clipper, const dFloat* clipperMatrix);
    da_NewtonMeshDifference NewtonMeshDifference;

    alias da_NewtonMeshIntersection =  NewtonMesh* function(const NewtonMesh* mesh, const NewtonMesh* clipper, const dFloat* clipperMatrix);
    da_NewtonMeshIntersection NewtonMeshIntersection;

    alias da_NewtonMeshClip =  void function(const NewtonMesh* mesh, const NewtonMesh* clipper, const dFloat* clipperMatrix,  NewtonMesh* * topMesh,  NewtonMesh* * bottomMesh);
    da_NewtonMeshClip NewtonMeshClip;

    alias da_NewtonMeshConvexMeshIntersection =  NewtonMesh* function(const NewtonMesh* mesh, const NewtonMesh* convexMesh);
    da_NewtonMeshConvexMeshIntersection NewtonMeshConvexMeshIntersection;

    alias da_NewtonMeshSimplify =  NewtonMesh* function(const NewtonMesh* mesh,  int maxVertexCount,  NewtonReportProgress reportPrograssCallback,  void* reportPrgressUserData);
    da_NewtonMeshSimplify NewtonMeshSimplify;

    alias da_NewtonMeshApproximateConvexDecomposition =  NewtonMesh* function(const NewtonMesh* mesh,  dFloat maxConcavity,  dFloat backFaceDistanceFactor,  int maxCount,  int maxVertexPerHull,  NewtonReportProgress reportProgressCallback,  void* reportProgressUserData);
    da_NewtonMeshApproximateConvexDecomposition NewtonMeshApproximateConvexDecomposition;

    alias da_NewtonRemoveUnusedVertices =  void function(const NewtonMesh* mesh,  int* vertexRemapTable);
    da_NewtonRemoveUnusedVertices NewtonRemoveUnusedVertices;

    alias da_NewtonMeshBeginBuild =  void function(const NewtonMesh* mesh);
    da_NewtonMeshBeginBuild NewtonMeshBeginBuild;

    alias da_NewtonMeshBeginFace =  void function(const NewtonMesh* mesh);
    da_NewtonMeshBeginFace NewtonMeshBeginFace;

    alias da_NewtonMeshAddPoint =  void function(const NewtonMesh* mesh,  double x,  double y,  double z);
    da_NewtonMeshAddPoint NewtonMeshAddPoint;

    alias da_NewtonMeshAddLayer =  void function(const NewtonMesh* mesh,  int layerIndex);
    da_NewtonMeshAddLayer NewtonMeshAddLayer;

    alias da_NewtonMeshAddMaterial =  void function(const NewtonMesh* mesh,  int materialIndex);
    da_NewtonMeshAddMaterial NewtonMeshAddMaterial;

    alias da_NewtonMeshAddNormal =  void function(const NewtonMesh* mesh,  dFloat x,  dFloat y,  dFloat z);
    da_NewtonMeshAddNormal NewtonMeshAddNormal;

    alias da_NewtonMeshAddBinormal =  void function(const NewtonMesh* mesh,  dFloat x,  dFloat y,  dFloat z);
    da_NewtonMeshAddBinormal NewtonMeshAddBinormal;

    alias da_NewtonMeshAddUV0 =  void function(const NewtonMesh* mesh,  dFloat u,  dFloat v);
    da_NewtonMeshAddUV0 NewtonMeshAddUV0;

    alias da_NewtonMeshAddUV1 =  void function(const NewtonMesh* mesh,  dFloat u,  dFloat v);
    da_NewtonMeshAddUV1 NewtonMeshAddUV1;

    alias da_NewtonMeshAddVertexColor =  void function(const NewtonMesh* mesh,  dFloat r,  dFloat g,  dFloat b,  dFloat a);
    da_NewtonMeshAddVertexColor NewtonMeshAddVertexColor;

    alias da_NewtonMeshEndFace =  void function(const NewtonMesh* mesh);
    da_NewtonMeshEndFace NewtonMeshEndFace;

    alias da_NewtonMeshEndBuild =  void function(const NewtonMesh* mesh);
    da_NewtonMeshEndBuild NewtonMeshEndBuild;

    alias da_NewtonMeshClearVertexFormat =  void function( NewtonMeshVertexFormat* format);
    da_NewtonMeshClearVertexFormat NewtonMeshClearVertexFormat;

    alias da_NewtonMeshBuildFromVertexListIndexList =  void function(const NewtonMesh* mesh, const NewtonMeshVertexFormat* format);
    da_NewtonMeshBuildFromVertexListIndexList NewtonMeshBuildFromVertexListIndexList;

    alias da_NewtonMeshGetPointCount =  int function(const NewtonMesh* mesh);
    da_NewtonMeshGetPointCount NewtonMeshGetPointCount;

    alias da_NewtonMeshGetIndexToVertexMap = const int* function(const NewtonMesh* mesh);
    da_NewtonMeshGetIndexToVertexMap NewtonMeshGetIndexToVertexMap;

    alias da_NewtonMeshGetVertexDoubleChannel =  void function(const NewtonMesh* mesh,  int vertexStrideInByte,  double* outBuffer);
    da_NewtonMeshGetVertexDoubleChannel NewtonMeshGetVertexDoubleChannel;

    alias da_NewtonMeshGetVertexChannel =  void function(const NewtonMesh* mesh,  int vertexStrideInByte,  dFloat* outBuffer);
    da_NewtonMeshGetVertexChannel NewtonMeshGetVertexChannel;

    alias da_NewtonMeshGetNormalChannel =  void function(const NewtonMesh* mesh,  int vertexStrideInByte,  dFloat* outBuffer);
    da_NewtonMeshGetNormalChannel NewtonMeshGetNormalChannel;

    alias da_NewtonMeshGetBinormalChannel =  void function(const NewtonMesh* mesh,  int vertexStrideInByte,  dFloat* outBuffer);
    da_NewtonMeshGetBinormalChannel NewtonMeshGetBinormalChannel;

    alias da_NewtonMeshGetUV0Channel =  void function(const NewtonMesh* mesh,  int vertexStrideInByte,  dFloat* outBuffer);
    da_NewtonMeshGetUV0Channel NewtonMeshGetUV0Channel;

    alias da_NewtonMeshGetUV1Channel =  void function(const NewtonMesh* mesh,  int vertexStrideInByte,  dFloat* outBuffer);
    da_NewtonMeshGetUV1Channel NewtonMeshGetUV1Channel;

    alias da_NewtonMeshGetVertexColorChannel =  void function(const NewtonMesh* mesh,  int vertexStrideInByte,  dFloat* outBuffer);
    da_NewtonMeshGetVertexColorChannel NewtonMeshGetVertexColorChannel;

    alias da_NewtonMeshHasNormalChannel =  int function(const NewtonMesh* mesh);
    da_NewtonMeshHasNormalChannel NewtonMeshHasNormalChannel;

    alias da_NewtonMeshHasBinormalChannel =  int function(const NewtonMesh* mesh);
    da_NewtonMeshHasBinormalChannel NewtonMeshHasBinormalChannel;

    alias da_NewtonMeshHasUV0Channel =  int function(const NewtonMesh* mesh);
    da_NewtonMeshHasUV0Channel NewtonMeshHasUV0Channel;

    alias da_NewtonMeshHasUV1Channel =  int function(const NewtonMesh* mesh);
    da_NewtonMeshHasUV1Channel NewtonMeshHasUV1Channel;

    alias da_NewtonMeshHasVertexColorChannel =  int function(const NewtonMesh* mesh);
    da_NewtonMeshHasVertexColorChannel NewtonMeshHasVertexColorChannel;

    alias da_NewtonMeshBeginHandle =  void* function(const NewtonMesh* mesh);
    da_NewtonMeshBeginHandle NewtonMeshBeginHandle;

    alias da_NewtonMeshEndHandle =  void function(const NewtonMesh* mesh,  void* handle);
    da_NewtonMeshEndHandle NewtonMeshEndHandle;

    alias da_NewtonMeshFirstMaterial =  int function(const NewtonMesh* mesh,  void* handle);
    da_NewtonMeshFirstMaterial NewtonMeshFirstMaterial;

    alias da_NewtonMeshNextMaterial =  int function(const NewtonMesh* mesh,  void* handle,  int materialId);
    da_NewtonMeshNextMaterial NewtonMeshNextMaterial;

    alias da_NewtonMeshMaterialGetMaterial =  int function(const NewtonMesh* mesh,  void* handle,  int materialId);
    da_NewtonMeshMaterialGetMaterial NewtonMeshMaterialGetMaterial;

    alias da_NewtonMeshMaterialGetIndexCount =  int function(const NewtonMesh* mesh,  void* handle,  int materialId);
    da_NewtonMeshMaterialGetIndexCount NewtonMeshMaterialGetIndexCount;

    alias da_NewtonMeshMaterialGetIndexStream =  void function(const NewtonMesh* mesh,  void* handle,  int materialId,  int* index);
    da_NewtonMeshMaterialGetIndexStream NewtonMeshMaterialGetIndexStream;

    alias da_NewtonMeshMaterialGetIndexStreamShort =  void function(const NewtonMesh* mesh,  void* handle,  int materialId,  short* index);
    da_NewtonMeshMaterialGetIndexStreamShort NewtonMeshMaterialGetIndexStreamShort;

    alias da_NewtonMeshCreateFirstSingleSegment =  NewtonMesh* function(const NewtonMesh* mesh);
    da_NewtonMeshCreateFirstSingleSegment NewtonMeshCreateFirstSingleSegment;

    alias da_NewtonMeshCreateNextSingleSegment =  NewtonMesh* function(const NewtonMesh* mesh, const NewtonMesh* segment);
    da_NewtonMeshCreateNextSingleSegment NewtonMeshCreateNextSingleSegment;

    alias da_NewtonMeshCreateFirstLayer =  NewtonMesh* function(const NewtonMesh* mesh);
    da_NewtonMeshCreateFirstLayer NewtonMeshCreateFirstLayer;

    alias da_NewtonMeshCreateNextLayer =  NewtonMesh* function(const NewtonMesh* mesh, const NewtonMesh* segment);
    da_NewtonMeshCreateNextLayer NewtonMeshCreateNextLayer;

    alias da_NewtonMeshGetTotalFaceCount =  int function(const NewtonMesh* mesh);
    da_NewtonMeshGetTotalFaceCount NewtonMeshGetTotalFaceCount;

    alias da_NewtonMeshGetTotalIndexCount =  int function(const NewtonMesh* mesh);
    da_NewtonMeshGetTotalIndexCount NewtonMeshGetTotalIndexCount;

    alias da_NewtonMeshGetFaces =  void function(const NewtonMesh* mesh,  int* faceIndexCount,  int* faceMaterial,  void* * faceIndices);
    da_NewtonMeshGetFaces NewtonMeshGetFaces;

    alias da_NewtonMeshGetVertexCount =  int function(const NewtonMesh* mesh);
    da_NewtonMeshGetVertexCount NewtonMeshGetVertexCount;

    alias da_NewtonMeshGetVertexStrideInByte =  int function(const NewtonMesh* mesh);
    da_NewtonMeshGetVertexStrideInByte NewtonMeshGetVertexStrideInByte;

    alias da_NewtonMeshGetVertexArray = const double* function(const NewtonMesh* mesh);
    da_NewtonMeshGetVertexArray NewtonMeshGetVertexArray;

    alias da_NewtonMeshGetVertexBaseCount =  int function(const NewtonMesh* mesh);
    da_NewtonMeshGetVertexBaseCount NewtonMeshGetVertexBaseCount;

    alias da_NewtonMeshSetVertexBaseCount =  void function(const NewtonMesh* mesh,  int baseCount);
    da_NewtonMeshSetVertexBaseCount NewtonMeshSetVertexBaseCount;

    alias da_NewtonMeshGetFirstVertex =  void* function(const NewtonMesh* mesh);
    da_NewtonMeshGetFirstVertex NewtonMeshGetFirstVertex;

    alias da_NewtonMeshGetNextVertex =  void* function(const NewtonMesh* mesh, const void* vertex);
    da_NewtonMeshGetNextVertex NewtonMeshGetNextVertex;

    alias da_NewtonMeshGetVertexIndex =  int function(const NewtonMesh* mesh, const void* vertex);
    da_NewtonMeshGetVertexIndex NewtonMeshGetVertexIndex;

    alias da_NewtonMeshGetFirstPoint =  void* function(const NewtonMesh* mesh);
    da_NewtonMeshGetFirstPoint NewtonMeshGetFirstPoint;

    alias da_NewtonMeshGetNextPoint =  void* function(const NewtonMesh* mesh, const void* point);
    da_NewtonMeshGetNextPoint NewtonMeshGetNextPoint;

    alias da_NewtonMeshGetPointIndex =  int function(const NewtonMesh* mesh, const void* point);
    da_NewtonMeshGetPointIndex NewtonMeshGetPointIndex;

    alias da_NewtonMeshGetVertexIndexFromPoint =  int function(const NewtonMesh* mesh, const void* point);
    da_NewtonMeshGetVertexIndexFromPoint NewtonMeshGetVertexIndexFromPoint;

    alias da_NewtonMeshGetFirstEdge =  void* function(const NewtonMesh* mesh);
    da_NewtonMeshGetFirstEdge NewtonMeshGetFirstEdge;

    alias da_NewtonMeshGetNextEdge =  void* function(const NewtonMesh* mesh, const void* edge);
    da_NewtonMeshGetNextEdge NewtonMeshGetNextEdge;

    alias da_NewtonMeshGetEdgeIndices =  void function(const NewtonMesh* mesh, const void* edge,  int* v0,  int* v1);
    da_NewtonMeshGetEdgeIndices NewtonMeshGetEdgeIndices;

    alias da_NewtonMeshGetFirstFace =  void* function(const NewtonMesh* mesh);
    da_NewtonMeshGetFirstFace NewtonMeshGetFirstFace;

    alias da_NewtonMeshGetNextFace =  void* function(const NewtonMesh* mesh, const void* face);
    da_NewtonMeshGetNextFace NewtonMeshGetNextFace;

    alias da_NewtonMeshIsFaceOpen =  int function(const NewtonMesh* mesh, const void* face);
    da_NewtonMeshIsFaceOpen NewtonMeshIsFaceOpen;

    alias da_NewtonMeshGetFaceMaterial =  int function(const NewtonMesh* mesh, const void* face);
    da_NewtonMeshGetFaceMaterial NewtonMeshGetFaceMaterial;

    alias da_NewtonMeshGetFaceIndexCount =  int function(const NewtonMesh* mesh, const void* face);
    da_NewtonMeshGetFaceIndexCount NewtonMeshGetFaceIndexCount;

    alias da_NewtonMeshGetFaceIndices =  void function(const NewtonMesh* mesh, const void* face,  int* indices);
    da_NewtonMeshGetFaceIndices NewtonMeshGetFaceIndices;

    alias da_NewtonMeshGetFacePointIndices =  void function(const NewtonMesh* mesh, const void* face,  int* indices);
    da_NewtonMeshGetFacePointIndices NewtonMeshGetFacePointIndices;

    alias da_NewtonMeshCalculateFaceNormal =  void function(const NewtonMesh* mesh, const void* face,  double* normal);
    da_NewtonMeshCalculateFaceNormal NewtonMeshCalculateFaceNormal;

    alias da_NewtonMeshSetFaceMaterial =  void function(const NewtonMesh* mesh, const void* face,  int matId);
    da_NewtonMeshSetFaceMaterial NewtonMeshSetFaceMaterial;

}
